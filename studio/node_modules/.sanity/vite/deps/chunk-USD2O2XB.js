import {
  require_jsx_runtime
} from "./chunk-I7BJ5GOC.js";
import {
  require_react
} from "./chunk-VTT67W3I.js";
import {
  __toESM
} from "./chunk-MJOZMRNF.js";

// node_modules/@sanity/telemetry/dist/react/index.js
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/@sanity/telemetry/dist/_chunks/noopLogger-b5b1676e.js
var capture = {
  capture: true
};
function listen(target, type, cb) {
  target.addEventListener(type, cb, capture);
  return () => target.removeEventListener(type, cb, capture);
}
function onPageHide(listener) {
  if ("onpagehide" in window) {
    return listen(window, "pagehide", listener);
  }
  const cleanupUnload = listen(window, "unload", listener);
  const cleanupBeforeUnload = listen(window, "unload", listener);
  return () => {
    cleanupUnload();
    cleanupBeforeUnload();
  };
}
function onVisibilityHidden(cb) {
  return listen(document, "visibilitychange", () => {
    if (document.visibilityState === "hidden") {
      cb();
    }
  });
}
function createNoopLogger() {
  const logger = {
    updateUserProperties() {
    },
    trace,
    log
  };
  function trace(telemetryTrace) {
    return {
      start() {
      },
      log(data) {
      },
      complete() {
      },
      newContext(name) {
        return logger;
      },
      error(error) {
      },
      await: (promise) => promise
    };
  }
  function log(event, data) {
  }
  return logger;
}
var noopLogger = createNoopLogger();

// node_modules/@sanity/telemetry/dist/react/index.js
function useTelemetryStoreLifeCycleEvents(store) {
  (0, import_react.useEffect)(() => onVisibilityHidden(store.flush), [store.flush]);
  (0, import_react.useEffect)(() => onPageHide(store.endWithBeacon), [store.endWithBeacon]);
}
var TelemetryLoggerContext = (0, import_react.createContext)(noopLogger);
function TelemetryProvider(_ref) {
  let {
    children,
    store
  } = _ref;
  useTelemetryStoreLifeCycleEvents(store);
  return (0, import_jsx_runtime.jsx)(TelemetryLoggerContext.Provider, {
    value: store.logger,
    children
  });
}
function useTelemetry() {
  return (0, import_react.useContext)(TelemetryLoggerContext);
}

export {
  TelemetryProvider,
  useTelemetry
};
//# sourceMappingURL=chunk-USD2O2XB.js.map
