{
  "version": 3,
  "sources": ["../../../sanity/src/presentation/PostMessagePerspective.tsx"],
  "sourcesContent": ["import {type ClientPerspective} from '@sanity/client'\nimport {type FC, memo, useEffect} from 'react'\n\nimport {type VisualEditingConnection} from './types'\n\nexport interface PostMessagePerspectiveProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nconst PostMessagePerspective: FC<PostMessagePerspectiveProps> = (props) => {\n  const {comlink, perspective} = props\n\n  // Return the perspective when requested\n  useEffect(() => {\n    return comlink.on('visual-editing/fetch-perspective', () => ({\n      perspective,\n    }))\n  }, [comlink, perspective])\n\n  // Dispatch a perspective message when the perspective changes\n  useEffect(() => {\n    comlink.post('presentation/perspective', {perspective})\n  }, [comlink, perspective])\n\n  return null\n}\n\nexport default memo(PostMessagePerspective)\n"],
  "mappings": ";;;;;;;;;;;;;AAUA,IAAMA,yBAA0DC,CAAA,UAAA;AAAAC,QAAAA,QAAAC,iCAAA,CAAA,GAC9D;IAAAC;IAAAC;EAAAA,IAA+BJ;AAAK,MAAAK,IAAAC;AAAAL,IAAAE,CAAAA,MAAAA,WAAAF,EAAAA,CAAAA,MAAAG,eAG1BC,KAAAA,MACDF,QAAOI,GAAI,oCAAkC,OAAA;IAAAH;EAElD,EAAA,GACDE,KAAA,CAACH,SAASC,WAAW,GAACH,EAAAA,CAAAA,IAAAE,SAAAF,EAAAA,CAAAA,IAAAG,aAAAH,EAAAA,CAAAA,IAAAI,IAAAJ,EAAAA,CAAAA,IAAAK,OAAAD,KAAAJ,EAAA,CAAA,GAAAK,KAAAL,EAAA,CAAA,QAJzBO,wBAAUH,IAIPC,EAAsB;AAAC,MAAAG,IAAAC;AAAAT,SAAAA,EAAAE,CAAAA,MAAAA,WAAAF,EAAAA,CAAAA,MAAAG,eAGhBK,KAAAA,MAAA;AACRN,YAAOQ,KAAM,4BAA0B;MAAAP;IAAAA,CAAe;EACrDM,GAAAA,KAAA,CAACP,SAASC,WAAW,GAACH,EAAAA,CAAAA,IAAAE,SAAAF,EAAAA,CAAAA,IAAAG,aAAAH,EAAAA,CAAAA,IAAAQ,IAAAR,EAAAA,CAAAA,IAAAS,OAAAD,KAAAR,EAAA,CAAA,GAAAS,KAAAT,EAAA,CAAA,QAFzBO,wBAAUC,IAEPC,EAAsB,GAAC;AAAA;AAK5B,IAAeE,+BAAAA,mBAAKb,sBAAsB;",
  "names": ["PostMessagePerspective", "props", "$", "_c", "comlink", "perspective", "t0", "t1", "on", "useEffect", "t2", "t3", "post", "memo"]
}
