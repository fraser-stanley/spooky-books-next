import {
  getPublishedId2 as getPublishedId,
  useEditState
} from "./chunk-O7WNDNL5.js";
import "./chunk-USD2O2XB.js";
import "./chunk-HC2ZIG6Z.js";
import "./chunk-OFN5KQCK.js";
import "./chunk-WTWHXYYA.js";
import {
  require_dist
} from "./chunk-F2YLR35X.js";
import "./chunk-QCUVG3AT.js";
import {
  require_jsx_runtime
} from "./chunk-I7BJ5GOC.js";
import "./chunk-IJWYKFFQ.js";
import {
  require_react
} from "./chunk-VTT67W3I.js";
import {
  __toESM
} from "./chunk-MJOZMRNF.js";

// node_modules/sanity/lib/_chunks-es/PostMessageRefreshMutations.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react_compiler_runtime = __toESM(require_dist(), 1);
var import_react = __toESM(require_react(), 1);
function PostMessageRefreshMutations(props) {
  const $ = (0, import_react_compiler_runtime.c)(8), {
    comlink,
    type,
    previewKitConnection,
    loadersConnection
  } = props;
  let t0, t1;
  $[0] !== props.id ? (t1 = getPublishedId(props.id), $[0] = props.id, $[1] = t1) : t1 = $[1], t0 = t1;
  const id = t0, {
    draft,
    published,
    ready
  } = useEditState(id, type, "low"), livePreviewEnabled = previewKitConnection === "connected" || loadersConnection === "connected";
  if (ready && draft || published) {
    let t2;
    return $[2] !== comlink || $[3] !== draft || $[4] !== id || $[5] !== livePreviewEnabled || $[6] !== published ? (t2 = (0, import_jsx_runtime.jsx)(PostMessageRefreshMutationsInner, { comlink, draft, livePreviewEnabled, published }, id), $[2] = comlink, $[3] = draft, $[4] = id, $[5] = livePreviewEnabled, $[6] = published, $[7] = t2) : t2 = $[7], t2;
  }
  return null;
}
function PostMessageRefreshMutationsInner(props) {
  const $ = (0, import_react_compiler_runtime.c)(14), {
    comlink,
    draft,
    published,
    livePreviewEnabled
  } = props, [prevDraft, setPrevDraft] = (0, import_react.useState)(draft), [prevPublished, setPrevPublished] = (0, import_react.useState)(published);
  let t0;
  $[0] !== comlink || $[1] !== draft || $[2] !== livePreviewEnabled || $[3] !== (prevDraft == null ? void 0 : prevDraft._rev) || $[4] !== (prevPublished == null ? void 0 : prevPublished._rev) || $[5] !== published ? (t0 = () => {
    (prevDraft == null ? void 0 : prevDraft._rev) !== (draft == null ? void 0 : draft._rev) && ((0, import_react.startTransition)(() => setPrevDraft(draft)), draft && (comlink == null ? void 0 : comlink.post("presentation/refresh", {
      source: "mutation",
      livePreviewEnabled,
      document: parseDocument(draft)
    }))), (prevPublished == null ? void 0 : prevPublished._rev) !== (published == null ? void 0 : published._rev) && ((0, import_react.startTransition)(() => setPrevPublished(published)), published && (comlink == null ? void 0 : comlink.post("presentation/refresh", {
      source: "mutation",
      livePreviewEnabled,
      document: parseDocument(published)
    })));
  }, $[0] = comlink, $[1] = draft, $[2] = livePreviewEnabled, $[3] = prevDraft == null ? void 0 : prevDraft._rev, $[4] = prevPublished == null ? void 0 : prevPublished._rev, $[5] = published, $[6] = t0) : t0 = $[6];
  const t1 = prevDraft == null ? void 0 : prevDraft._rev, t2 = prevPublished == null ? void 0 : prevPublished._rev;
  let t3;
  return $[7] !== comlink || $[8] !== draft || $[9] !== livePreviewEnabled || $[10] !== published || $[11] !== t1 || $[12] !== t2 ? (t3 = [comlink, draft, livePreviewEnabled, t1, t2, published], $[7] = comlink, $[8] = draft, $[9] = livePreviewEnabled, $[10] = published, $[11] = t1, $[12] = t2, $[13] = t3) : t3 = $[13], (0, import_react.useEffect)(t0, t3), null;
}
function parseDocument(document) {
  const {
    _id,
    _type,
    _rev,
    slug
  } = document;
  return {
    _id,
    _type,
    _rev,
    slug
  };
}
var PostMessageRefreshMutations$1 = (0, import_react.memo)(PostMessageRefreshMutations);
export {
  PostMessageRefreshMutations$1 as default
};
//# sourceMappingURL=PostMessageRefreshMutations-ELICWUYD.js.map
