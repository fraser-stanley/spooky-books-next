import {
  DisplayedDocumentBroadcasterProvider
} from "./chunk-6S6DNYGF.js";
import {
  createCompatibilityActors
} from "./chunk-WIDIV4TM.js";
import {
  require_fast_deep_equal
} from "./chunk-WGCVNZWJ.js";
import {
  API_VERSION,
  DEFAULT_TOOL_NAME,
  EDIT_INTENT_MODE,
  MAX_TIME_TO_OVERLAYS_CONNECTION,
  POPUP_CHECK_INTERVAL,
  PresentationSpinner,
  SECRET_TTL,
  apiVersion,
  deleteExpiredSecretsQuery,
  fetchSharedAccessQuery,
  fetchVercelProtectionBypassSecret,
  presentationLocaleNamespace,
  schemaIdSingleton,
  schemaType,
  schemaTypeSingleton,
  tag,
  urlSearchParamPreviewPathname,
  urlSearchParamPreviewPerspective,
  urlSearchParamPreviewSecret,
  urlSearchParamVercelProtectionBypass,
  urlSearchParamVercelSetBypassCookie,
  usePresentationNavigate,
  usePresentationTool
} from "./chunk-7RJXURRU.js";
import {
  DocumentPane,
  PaneContainer,
  PaneLayout,
  StructureToolProvider
} from "./chunk-AAF7AYOV.js";
import "./chunk-VXJJSEHB.js";
import {
  Button,
  COMMENTS_INSPECTOR_NAME,
  CommentsIntentProvider,
  ErrorBoundary,
  MenuButton,
  MenuItem,
  PaneRouterContext,
  PresentationContext,
  PresentationNavigateContext,
  PresentationPanelsContext,
  PresentationParamsContext,
  PresentationSharedStateContext,
  PreviewCard,
  SanityDefaultPreview,
  SanityMonogram,
  StateLink,
  Tooltip,
  TooltipDelayGroupProvider,
  Translate,
  assign,
  createConnectionMachine,
  createController,
  decodeJsonParams,
  fromObservable,
  fromPromise,
  getPreviewStateObservable$1,
  getPreviewValueWithFallback,
  getPublishedId2 as getPublishedId,
  log,
  setup,
  studioPath,
  throwError,
  useActiveWorkspace,
  useActorRef,
  useClient,
  useCurrentUser,
  useDataset,
  useDocumentPreviewStore,
  useGrantsStore,
  usePerspective,
  useProjectId$1,
  useRouter,
  useSchema,
  useSelector,
  useTranslation2 as useTranslation,
  useUnique,
  useWorkspace,
  v4_default,
  validateApiPerspective
} from "./chunk-O7WNDNL5.js";
import "./chunk-USD2O2XB.js";
import {
  BoundaryElementProvider,
  Box,
  Card,
  Code,
  Container,
  CopyIcon,
  DesktopIcon,
  Flex,
  Grid,
  Hotkeys,
  Inline,
  Label,
  LaunchIcon,
  Menu,
  MenuDivider,
  MobileDeviceIcon,
  PanelLeftIcon,
  RefreshIcon,
  ResetIcon,
  ShareIcon,
  Spinner,
  Stack,
  Switch,
  Text,
  TextInput,
  WarningOutlineIcon,
  dt,
  ft,
  useEffectEvent,
  usePrefersReducedMotion,
  useToast
} from "./chunk-HC2ZIG6Z.js";
import {
  AnimatePresence,
  MotionConfig,
  motion
} from "./chunk-OFN5KQCK.js";
import "./chunk-WTWHXYYA.js";
import {
  require_dist
} from "./chunk-F2YLR35X.js";
import "./chunk-QCUVG3AT.js";
import {
  require_jsx_runtime
} from "./chunk-I7BJ5GOC.js";
import {
  require_react_dom
} from "./chunk-IJWYKFFQ.js";
import {
  require_react
} from "./chunk-VTT67W3I.js";
import {
  __toESM
} from "./chunk-MJOZMRNF.js";

// node_modules/sanity/lib/_chunks-es/PresentationToolGrantsCheck.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react_compiler_runtime = __toESM(require_dist(), 1);
var import_react2 = __toESM(require_react(), 1);

// node_modules/sanity/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
}
var parse_default = parse;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/sanity/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues(rnds8);
}

// node_modules/sanity/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  const words = uint8ToUint32(bytes);
  const md5Bytes = wordsToMd5(words, bytes.length * 8);
  return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
  const bytes = new Uint8Array(input.length * 4);
  for (let i = 0; i < input.length * 4; i++) {
    bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
  }
  return bytes;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  const xpad = new Uint32Array(getOutputLength(len)).fill(0);
  xpad.set(x);
  xpad[len >> 5] |= 128 << len % 32;
  xpad[xpad.length - 1] = len;
  x = xpad;
  let a = 1732584193;
  let b = -271733879;
  let c2 = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c2;
    const oldd = d;
    a = md5ff(a, b, c2, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c2, x[i + 1], 12, -389564586);
    c2 = md5ff(c2, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c2, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c2, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c2, x[i + 5], 12, 1200080426);
    c2 = md5ff(c2, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c2, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c2, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c2, x[i + 9], 12, -1958414417);
    c2 = md5ff(c2, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c2, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c2, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c2, x[i + 13], 12, -40341101);
    c2 = md5ff(c2, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c2, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c2, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c2, x[i + 6], 9, -1069501632);
    c2 = md5gg(c2, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c2, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c2, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c2, x[i + 10], 9, 38016083);
    c2 = md5gg(c2, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c2, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c2, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c2, x[i + 14], 9, -1019803690);
    c2 = md5gg(c2, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c2, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c2, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c2, x[i + 2], 9, -51403784);
    c2 = md5gg(c2, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c2, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c2, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c2, x[i + 8], 11, -2022574463);
    c2 = md5hh(c2, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c2, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c2, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c2, x[i + 4], 11, 1272893353);
    c2 = md5hh(c2, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c2, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c2, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c2, x[i], 11, -358537222);
    c2 = md5hh(c2, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c2, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c2, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c2, x[i + 12], 11, -421815835);
    c2 = md5hh(c2, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c2, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c2, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c2, x[i + 7], 10, 1126891415);
    c2 = md5ii(c2, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c2, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c2, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c2, x[i + 3], 10, -1894986606);
    c2 = md5ii(c2, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c2, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c2, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c2, x[i + 15], 10, -30611744);
    c2 = md5ii(c2, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c2, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c2, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c2, x[i + 11], 10, -1120210379);
    c2 = md5ii(c2, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c2, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c2 = safeAdd(c2, oldc);
    d = safeAdd(d, oldd);
  }
  return Uint32Array.of(a, b, c2, d);
}
function uint8ToUint32(input) {
  if (input.length === 0) {
    return new Uint32Array();
  }
  const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
  for (let i = 0; i < input.length; i++) {
    output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c2, d, x, s, t) {
  return md5cmn(b & c2 | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c2, d, x, s, t) {
  return md5cmn(b & d | c2 & ~d, a, b, x, s, t);
}
function md5hh(a, b, c2, d, x, s, t) {
  return md5cmn(b ^ c2 ^ d, a, b, x, s, t);
}
function md5ii(a, b, c2, d, x, s, t) {
  return md5cmn(c2 ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = new Uint8Array(str.length);
  for (let i = 0; i < str.length; ++i) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(version, hash, value, namespace, buf, offset) {
  const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
  const namespaceBytes = typeof namespace === "string" ? parse_default(namespace) : namespace;
  if (typeof namespace === "string") {
    namespace = parse_default(namespace);
  }
  if ((namespace == null ? void 0 : namespace.length) !== 16) {
    throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
  }
  let bytes = new Uint8Array(16 + valueBytes.length);
  bytes.set(namespaceBytes);
  bytes.set(valueBytes, namespaceBytes.length);
  bytes = hash(bytes);
  bytes[6] = bytes[6] & 15 | version;
  bytes[8] = bytes[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = bytes[i];
    }
    return buf;
  }
  return unsafeStringify(bytes);
}

// node_modules/sanity/node_modules/uuid/dist/esm-browser/v3.js
function v3(value, namespace, buf, offset) {
  return v35(48, md5_default, value, namespace, buf, offset);
}
v3.DNS = DNS;
v3.URL = URL2;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = { randomUUID };

// node_modules/sanity/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  var _a;
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? ((_a = options.rng) == null ? void 0 : _a.call(options)) ?? rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default2 = v4;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K = [1518500249, 1859775393, 2400959708, 3395469782];
  const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  const newBytes = new Uint8Array(bytes.length + 1);
  newBytes.set(bytes);
  newBytes[bytes.length] = 128;
  bytes = newBytes;
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j = 0; j < 16; ++j) {
      arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H[0];
    let b = H[1];
    let c2 = H[2];
    let d = H[3];
    let e = H[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T = ROTL(a, 5) + f(s, b, c2, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c2;
      c2 = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c2 >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
}
var sha1_default = sha1;

// node_modules/sanity/node_modules/uuid/dist/esm-browser/v5.js
function v5(value, namespace, buf, offset) {
  return v35(80, sha1_default, value, namespace, buf, offset);
}
v5.DNS = DNS;
v5.URL = URL2;

// node_modules/sanity/lib/_chunks-es/PresentationToolGrantsCheck.mjs
var import_react_dom = __toESM(require_react_dom(), 1);

// node_modules/@sanity/preview-url-secret/dist/without-secret-search-params.js
function withoutSecretSearchParams(url) {
  const newUrl = new URL(url), { searchParams } = newUrl;
  return searchParams.delete(urlSearchParamPreviewPathname), searchParams.delete(urlSearchParamPreviewSecret), searchParams.delete(urlSearchParamPreviewPerspective), searchParams.delete(urlSearchParamVercelProtectionBypass), searchParams.delete(urlSearchParamVercelSetBypassCookie), newUrl;
}
function setSecretSearchParams(url, secret, redirectTo, perspective) {
  const newUrl = new URL(url), { searchParams } = newUrl;
  return secret && (searchParams.set(urlSearchParamPreviewSecret, secret), searchParams.set(urlSearchParamPreviewPathname, redirectTo)), searchParams.set(urlSearchParamPreviewPerspective, perspective), newUrl;
}

// node_modules/@sanity/preview-url-secret/dist/_chunks-es/generateSecret.js
function generateUrlSecret() {
  if (typeof crypto < "u") {
    const array = new Uint8Array(16);
    crypto.getRandomValues(array);
    let key = "";
    for (let i = 0; i < array.length; i++)
      key += array[i].toString(16).padStart(2, "0");
    return key = btoa(key).replace(/\+/g, "-").replace(/\//g, "_").replace(/[=]+$/, ""), key;
  }
  return Math.random().toString(36).slice(2);
}

// node_modules/@sanity/preview-url-secret/dist/toggle-preview-access-sharing.js
async function enablePreviewAccessSharing(_client, source, studioUrl, userId) {
  const client = _client.withConfig({ apiVersion }), newSecret = generateUrlSecret(), patch = client.patch(schemaIdSingleton).set({ secret: newSecret, studioUrl, userId });
  return await client.transaction().createIfNotExists({ _id: schemaIdSingleton, _type: schemaTypeSingleton, source, studioUrl, userId }).patch(patch).commit({ tag }), { secret: newSecret };
}
async function disablePreviewAccessSharing(_client, source, studioUrl, userId) {
  const client = _client.withConfig({ apiVersion }), patch = client.patch(schemaIdSingleton).set({ secret: null, studioUrl, userId });
  await client.transaction().createIfNotExists({ _id: schemaIdSingleton, _type: schemaTypeSingleton, source, studioUrl, userId }).patch(patch).commit({ tag });
}

// node_modules/sanity/lib/_chunks-es/PresentationToolGrantsCheck.mjs
var import_fast_deep_equal = __toESM(require_fast_deep_equal(), 1);

// node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (
          // `0-9`
          code >= 48 && code <= 57 || // `A-Z`
          code >= 65 && code <= 90 || // `a-z`
          code >= 97 && code <= 122 || // `_`
          code === 95
        ) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at ".concat(i));
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at '.concat(j));
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at ".concat(j));
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at ".concat(i));
      if (!pattern)
        throw new TypeError("Missing pattern at ".concat(i));
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse2(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a, _b = options.delimiter, delimiter = _b === void 0 ? "/#?" : _b;
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected ".concat(nextType, " at ").concat(index, ", expected ").concat(type));
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  var isSafe = function(value2) {
    for (var _i = 0, delimiter_1 = delimiter; _i < delimiter_1.length; _i++) {
      var char2 = delimiter_1[_i];
      if (value2.indexOf(char2) > -1)
        return true;
    }
    return false;
  };
  var safePattern = function(prefix2) {
    var prev = result[result.length - 1];
    var prevText = prefix2 || (prev && typeof prev === "string" ? prev : "");
    if (prev && !prevText) {
      throw new TypeError('Must have text between two parameters, missing text after "'.concat(prev.name, '"'));
    }
    if (!prevText || isSafe(prevText))
      return "[^".concat(escapeString(delimiter), "]+?");
    return "(?:(?!".concat(escapeString(prevText), ")[^").concat(escapeString(delimiter), "])+?");
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || safePattern(prefix),
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? safePattern(prefix) : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function match(str, options) {
  var keys = [];
  var re = pathToRegexp(str, keys, options);
  return regexpToFunction(re, keys, options);
}
function regexpToFunction(re, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.decode, decode = _a === void 0 ? function(x) {
    return x;
  } : _a;
  return function(pathname) {
    var m = re.exec(pathname);
    if (!m)
      return false;
    var path = m[0], index = m.index;
    var params = /* @__PURE__ */ Object.create(null);
    var _loop_1 = function(i2) {
      if (m[i2] === void 0)
        return "continue";
      var key = keys[i2 - 1];
      if (key.modifier === "*" || key.modifier === "+") {
        params[key.name] = m[i2].split(key.prefix + key.suffix).map(function(value) {
          return decode(value, key);
        });
      } else {
        params[key.name] = decode(m[i2], key);
      }
    };
    for (var i = 1; i < m.length; i++) {
      _loop_1(i);
    }
    return { path, index, params };
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      // Use parenthesized substring match if available, index otherwise
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:".concat(parts.join("|"), ")"), flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse2(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {
    return x;
  } : _d, _e = options.delimiter, delimiter = _e === void 0 ? "/#?" : _e, _f = options.endsWith, endsWith = _f === void 0 ? "" : _f;
  var endsWithRe = "[".concat(escapeString(endsWith), "]|$");
  var delimiterRe = "[".concat(escapeString(delimiter), "]");
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode(token));
    } else {
      var prefix = escapeString(encode(token.prefix));
      var suffix = escapeString(encode(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:".concat(prefix, "((?:").concat(token.pattern, ")(?:").concat(suffix).concat(prefix, "(?:").concat(token.pattern, "))*)").concat(suffix, ")").concat(mod);
          } else {
            route += "(?:".concat(prefix, "(").concat(token.pattern, ")").concat(suffix, ")").concat(token.modifier);
          }
        } else {
          if (token.modifier === "+" || token.modifier === "*") {
            throw new TypeError('Can not repeat "'.concat(token.name, '" without a prefix and suffix'));
          }
          route += "(".concat(token.pattern, ")").concat(token.modifier);
        }
      } else {
        route += "(?:".concat(prefix).concat(suffix, ")").concat(token.modifier);
      }
    }
  }
  if (end) {
    if (!strict)
      route += "".concat(delimiterRe, "?");
    route += !options.endsWith ? "$" : "(?=".concat(endsWithRe, ")");
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:".concat(delimiterRe, "(?=").concat(endsWithRe, "))?");
    }
    if (!isEndDelimited) {
      route += "(?=".concat(delimiterRe, "|").concat(endsWithRe, ")");
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// node_modules/@sanity/preview-url-secret/dist/create-secret.js
async function createPreviewSecret(_client, source, studioUrl, userId, id = v4_default()) {
  const client = _client.withConfig({ apiVersion });
  try {
    const expiresAt = new Date(Date.now() + 1e3 * SECRET_TTL), _id = `drafts.${id}`, newSecret = generateUrlSecret(), patch = client.patch(_id).set({ secret: newSecret, source, studioUrl, userId });
    return await client.transaction().createOrReplace({ _id, _type: schemaType }).patch(patch).commit({ tag }), { secret: newSecret, expiresAt };
  } finally {
    try {
      await client.delete({ query: deleteExpiredSecretsQuery });
    } catch (err) {
      console.error("Failed to delete expired secrets", err);
    }
  }
}

// node_modules/@sanity/preview-url-secret/dist/toggle-vercel-protection-bypass.js
function subcribeToVercelProtectionBypass(client, onChange) {
  let controller = new AbortController(), usedTags = [];
  async function fetchSecret(lastLiveEventId, signal) {
    const { result, syncTags } = await client.fetch(
      fetchVercelProtectionBypassSecret,
      {},
      {
        filterResponse: false,
        lastLiveEventId,
        tag: "preview-url-secret.fetch-vercel-bypass-protection-secret"
      }
    );
    Array.isArray(syncTags) && (usedTags = syncTags), signal.aborted || onChange(result);
  }
  const subscription = client.live.events().subscribe({
    next: (event) => {
      event.type === "message" && (controller.abort(), controller = new AbortController(), event.tags.some((tag2) => usedTags.includes(tag2)) && fetchSecret(event.id, controller.signal));
    },
    // eslint-disable-next-line no-console
    error: (reason) => console.error(reason)
  });
  return fetchSecret(null, controller.signal), () => {
    subscription.unsubscribe(), controller.abort();
  };
}

// node_modules/sanity/lib/_chunks-es/PresentationToolGrantsCheck.mjs
var PostMessageFeatures = (props) => {
  const $ = (0, import_react_compiler_runtime.c)(3), {
    comlink
  } = props;
  let t0, t1;
  return $[0] !== comlink ? (t0 = () => comlink.on("visual-editing/features", _temp$f), t1 = [comlink], $[0] = comlink, $[1] = t0, $[2] = t1) : (t0 = $[1], t1 = $[2]), (0, import_react2.useEffect)(t0, t1), null;
};
var PostMessageFeatures$1 = (0, import_react2.memo)(PostMessageFeatures);
function _temp$f() {
  return {
    features: {
      optimistic: true
    }
  };
}
var presentationMachine = setup({
  types: {},
  actions: {
    //
  },
  actors: {
    //
  },
  guards: {
    //
  }
}).createMachine({
  // eslint-disable-next-line tsdoc/syntax
  /** @xstate-layout N4IgpgJg5mDOIC5QAUBOcwDsAuBDbAlgPaYAEAKkUQDYDEBAZqrgLZinrVG4QDaADAF1EoAA5FYBQiREgAHogAsAJgA0IAJ6IAHAEYAdIoCcJowFY9R-vzPLlAX3vq0GHPmJlKNfVx4FMUPRMrOy+EJACwkgg4pLSmLIKCLoAbIr6Zoop2tqKAMxpJnnF6loIZkbK+uZ5umapKXmK-Cm6js7osFh48RRU1D7c4RC02ERQUNTsAG4EsACuuNSkkFL+UKRE02Co1LgasJGysWsy0UnaZinVyrpGAOx1Rim2efeliPe3hma1Zvy6XT8W4OJwgFxdNy9LwDMKQILMNgcMBMOAACyO0RO8USiAK930LWU-3uiiB9yaKXemkQjW01V+txS-GKqUe7XBnW67hIfW8cJGjER7E4Q0xYgkpwS5zxVMJKWJ-FJ5Mp1LKFn4Pz+DSaLTaYIh3Oh-UGPEg+nQqNgaPWCJCpAF4pikpxMoQKWZ+gp+TSZLy1hSH3deXpNSZLNqVP1HVcPQ8fNhQ3Nor8ATtSMdQmOLo8uPdnu9BUUfoDQY1WrqOuarUcYMwRHC8Gihqh8Zh2biubdAFpAzSEL2OS247yYfodqgiKgO1K8yog7ptATFL9dFljMDrHkh1zW6OTWF1jPXaAkmY1YgKnktfxtC9dPd+Io9DvYzzPAekxBj13T3i7vKirKkqqpBsYVQ1HUFjFs0t6KK+kIjh+-JfvoBAQFMP5nH+CDaMo16KjYyjMvUNh5GWOT6MoLL8A8ygrk0dQIUabafmaEAWiinQ2gEWHSjhjJUYuj73Pcd63noQaNEYFb-Dk2S0cxe7IYm7GcYevFYjm2HyJeeQQb8tFkikVjGNoFGajUt73o+z61vYQA */
  id: "Presentation Tool",
  context: {
    url: null,
    error: null,
    visualEditingOverlaysEnabled: false
  },
  on: {
    "iframe reload": {
      actions: assign({
        url: null
      }),
      target: ".loading"
    }
  },
  states: {
    error: {
      description: "Failed to load, either because of a misconfiguration, a network error, or an unexpected error",
      tags: ["error"]
    },
    loading: {
      on: {
        "iframe loaded": {
          target: "loaded"
        }
      },
      tags: ["busy"]
    },
    loaded: {
      on: {
        "toggle visual editing overlays": {
          actions: assign({
            visualEditingOverlaysEnabled: ({
              event
            }) => event.enabled
          })
        },
        "iframe refresh": {
          target: ".refreshing"
        },
        "iframe reload": {
          target: ".reloading"
        }
      },
      states: {
        idle: {},
        refreshing: {
          on: {
            "iframe loaded": {
              target: "idle"
            }
          },
          tags: ["busy"]
        },
        reloading: {
          on: {
            "iframe loaded": {
              target: "idle"
            }
          },
          tags: ["busy"]
        }
      },
      initial: "idle"
    }
  },
  initial: "loading"
});
var SharedStateProvider = function(props) {
  const $ = (0, import_react_compiler_runtime.c)(14), {
    comlink,
    children
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const sharedState = (0, import_react2.useRef)(t0);
  let t1, t2;
  $[1] !== comlink ? (t1 = () => comlink == null ? void 0 : comlink.on("visual-editing/shared-state", () => ({
    state: sharedState.current
  })), t2 = [comlink], $[1] = comlink, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), (0, import_react2.useEffect)(t1, t2);
  let t3;
  $[4] !== comlink ? (t3 = (key, value) => {
    sharedState.current[key] = value, comlink == null ? void 0 : comlink.post("presentation/shared-state", {
      key,
      value
    });
  }, $[4] = comlink, $[5] = t3) : t3 = $[5];
  const setValue = t3;
  let t4;
  $[6] !== comlink ? (t4 = (key_0) => {
    comlink == null ? void 0 : comlink.post("presentation/shared-state", {
      key: key_0
    }), delete sharedState.current[key_0];
  }, $[6] = comlink, $[7] = t4) : t4 = $[7];
  const removeValue = t4;
  let t5, t6;
  $[8] !== removeValue || $[9] !== setValue ? (t6 = {
    removeValue,
    setValue
  }, $[8] = removeValue, $[9] = setValue, $[10] = t6) : t6 = $[10], t5 = t6;
  const context = t5;
  let t7;
  return $[11] !== children || $[12] !== context ? (t7 = (0, import_jsx_runtime.jsx)(PresentationSharedStateContext.Provider, { value: context, children }), $[11] = children, $[12] = context, $[13] = t7) : t7 = $[13], t7;
};
var Root$1 = dt.div`
  overflow: hidden;
  flex-basis: 0;
  flex-shrink: 1;
`;
var Panel = function(t0) {
  const $ = (0, import_react_compiler_runtime.c)(15), {
    children,
    defaultSize: t1,
    id,
    minWidth,
    maxWidth,
    order: t2
  } = t0, defaultSize = t1 === void 0 ? null : t1, order = t2 === void 0 ? 0 : t2, context = (0, import_react2.useContext)(PresentationPanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const {
    getPanelStyle,
    registerElement,
    unregisterElement
  } = context;
  let t3;
  $[0] !== getPanelStyle || $[1] !== id ? (t3 = getPanelStyle(id), $[0] = getPanelStyle, $[1] = id, $[2] = t3) : t3 = $[2];
  const style = t3;
  let t4, t5;
  $[3] !== defaultSize || $[4] !== id || $[5] !== maxWidth || $[6] !== minWidth || $[7] !== order || $[8] !== registerElement || $[9] !== unregisterElement ? (t4 = () => (registerElement(id, {
    id,
    type: "panel",
    defaultSize,
    maxWidth: maxWidth ?? null,
    minWidth: minWidth ?? 0,
    order
  }), () => {
    unregisterElement(id);
  }), t5 = [id, defaultSize, order, maxWidth, minWidth, registerElement, unregisterElement], $[3] = defaultSize, $[4] = id, $[5] = maxWidth, $[6] = minWidth, $[7] = order, $[8] = registerElement, $[9] = unregisterElement, $[10] = t4, $[11] = t5) : (t4 = $[10], t5 = $[11]), (0, import_react2.useLayoutEffect)(t4, t5);
  let t6;
  return $[12] !== children || $[13] !== style ? (t6 = (0, import_jsx_runtime.jsx)(Root$1, { style, children }), $[12] = children, $[13] = style, $[14] = t6) : t6 = $[14], t6;
};
function debounce(fn, timeout) {
  let timer;
  return (...args) => {
    clearTimeout(timer), timer = setTimeout(() => {
      fn.apply(fn, args);
    }, timeout);
  };
}
var itemKey = "presentation/panels";
var getStoredItem = () => JSON.parse(localStorage.getItem(itemKey) || "{}");
var setStoredItem = (data) => {
  localStorage.setItem(itemKey, JSON.stringify(data));
};
var getKeyForPanels = (panels) => panels.map((panel) => [panel.id, panel.order].join(":")).join(",");
function usePanelsStorage() {
  const $ = (0, import_react_compiler_runtime.c)(1);
  let t0;
  const get = _temp2$8, set = _temp3$4;
  let t1;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    const setDebounced = debounce(set, 100);
    t1 = {
      get,
      set,
      setDebounced
    }, $[0] = t1;
  } else
    t1 = $[0];
  return t0 = t1, t0;
}
function _temp3$4(panels_0, widths) {
  const stored_0 = getStoredItem(), key_0 = getKeyForPanels(panels_0), data = {
    ...stored_0,
    [key_0]: widths
  };
  setStoredItem(data);
}
function _temp2$8(panels) {
  const stored = getStoredItem(), key = getKeyForPanels(panels);
  return Array.isArray(stored[key]) && stored[key].some(_temp$e) ? void 0 : stored[key];
}
function _temp$e(val) {
  return val === null;
}
function getNextWidth(panel, nextWidth, containerWidth) {
  const {
    maxWidth: maxWidthPx,
    minWidth: minWidthPx
  } = panel, maxWidth = maxWidthPx == null ? 100 : maxWidthPx / containerWidth * 100, minWidth = minWidthPx / containerWidth * 100;
  return Math.min(maxWidth, Math.max(minWidth, nextWidth));
}
function getNextWidths(delta, containerWidth, panelBefore, panelAfter, panelsState, initialDragState) {
  const {
    panels,
    widths: prevWidths
  } = panelsState, {
    widths: initialWidths
  } = initialDragState, widths = initialWidths || prevWidths, nextWidths = [...widths];
  {
    const pivotPanel2 = delta < 0 ? panelAfter : panelBefore, index2 = panels.findIndex((panel) => panel.id === pivotPanel2.id), width = widths[index2], nextWidth = getNextWidth(pivotPanel2, width + Math.abs(delta), containerWidth);
    if (width === nextWidth)
      return widths;
    delta = delta < 0 ? width - nextWidth : nextWidth - width;
  }
  let deltaApplied = 0, pivotPanel = delta < 0 ? panelBefore : panelAfter, index = panels.findIndex((panel) => panel.id === pivotPanel.id);
  for (; ; ) {
    const panel = panels[index], width = widths[index], deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied), nextWidth = getNextWidth(panel, width - deltaRemaining, containerWidth);
    if (width !== nextWidth && (deltaApplied += width - nextWidth, nextWidths[index] = nextWidth, deltaApplied.toPrecision(10).localeCompare(Math.abs(delta).toPrecision(10), void 0, {
      numeric: true
    }) >= 0))
      break;
    if (delta < 0) {
      if (--index < 0)
        break;
    } else if (++index >= panels.length)
      break;
  }
  return deltaApplied === 0 ? widths : (pivotPanel = delta < 0 ? panelAfter : panelBefore, index = panels.findIndex((panel) => panel.id === pivotPanel.id), nextWidths[index] = widths[index] + deltaApplied, nextWidths);
}
function getPanelWidth(panels, id, widths) {
  if (panels.length === 1) return "100";
  const index = panels.findIndex((panel) => panel.id === id), width = widths[index];
  return width == null ? "0" : width.toPrecision(10);
}
function getOffset(event, handleElement, initialOffset = 0, initialHandleElementRect = null) {
  const pointerOffset = event.clientX, elementOffset = (initialHandleElementRect || handleElement.getBoundingClientRect()).left;
  return pointerOffset - elementOffset - initialOffset;
}
function isPanel(element) {
  return element.type === "panel";
}
function isResizer(element) {
  return element.type === "resizer";
}
function getSortedElements(elements) {
  return Array.from(elements.values()).sort(({
    order: a
  }, {
    order: b
  }) => a == null && b == null ? 0 : a == null ? -1 : b == null ? 1 : a - b);
}
function validateWidths(panels, widthsToValidate, containerWidth) {
  const total = widthsToValidate.reduce((total2, width) => total2 + width, 0), widths = [...widthsToValidate].map((width) => width / total * 100);
  let remainingWidth = 0;
  for (let index = 0; index < panels.length; index++) {
    const panel = panels[index], width = widths[index], nextWidth = getNextWidth(panel, width, containerWidth);
    width != nextWidth && (remainingWidth += width - nextWidth, widths[index] = nextWidth);
  }
  if (remainingWidth.toFixed(3) !== "0.000")
    for (let index = 0; index < panels.length; index++) {
      const panel = panels[index];
      let {
        maxWidth,
        minWidth
      } = panel;
      minWidth = minWidth / containerWidth * 100, maxWidth != null && (maxWidth = maxWidth / containerWidth * 100);
      const width = Math.min(
        // eslint-disable-next-line no-negated-condition
        maxWidth ?? 100,
        Math.max(minWidth, widths[index] + remainingWidth)
      );
      if (width !== widths[index] && (remainingWidth -= width - widths[index], widths[index] = width, Math.abs(remainingWidth).toFixed(3) === "0.000"))
        break;
    }
  return widths;
}
function getDefaultWidths(panels) {
  let panelsWithoutWidth = panels.length, remainingWidthTotal = 100;
  const widthsWithNulls = panels.map((panel) => panel.defaultSize ? (remainingWidthTotal -= panel.defaultSize, panelsWithoutWidth -= 1, panel.defaultSize) : null), defaultWidth = remainingWidthTotal / panelsWithoutWidth;
  return widthsWithNulls.map((width) => width === null ? defaultWidth : width);
}
var PanelsWrapper = dt.div`
  display: flex;
  flex-direction: row;
  height: 100%;
  overflow: hidden;
  width: 100%;
`;
var Panels = function(t0) {
  const $ = (0, import_react_compiler_runtime.c)(46), {
    children
  } = t0, panelsEl = (0, import_react2.useRef)(null);
  let t1;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t1 = /* @__PURE__ */ new Map(), $[0] = t1) : t1 = $[0];
  const [elements, setElements] = (0, import_react2.useState)(t1);
  let t2, t3;
  $[1] !== elements ? (t3 = getSortedElements(elements).filter(isPanel), $[1] = elements, $[2] = t3) : t3 = $[2], t2 = t3;
  const panels = t2;
  let t4;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t4 = [], $[3] = t4) : t4 = $[3];
  const [widths, setWidths] = (0, import_react2.useState)(t4), [activeResizer, setActiveResizer] = (0, import_react2.useState)(null);
  let t5;
  $[4] !== elements || $[5] !== panels || $[6] !== widths ? (t5 = {
    elements,
    panels,
    widths
  }, $[4] = elements, $[5] = panels, $[6] = widths, $[7] = t5) : t5 = $[7];
  const panelsRef = (0, import_react2.useRef)(t5);
  let t6;
  $[8] !== activeResizer || $[9] !== panels || $[10] !== widths ? (t6 = (id) => ({
    flexGrow: getPanelWidth(panels, id, widths),
    pointerEvents: activeResizer === null ? void 0 : "none"
  }), $[8] = activeResizer, $[9] = panels, $[10] = widths, $[11] = t6) : t6 = $[11];
  const getPanelStyle = t6;
  let t7;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t7 = (id_0, data) => {
    setElements((prev) => {
      if (prev.has(id_0))
        return prev;
      const next = new Map(prev);
      return next.set(id_0, data), next;
    });
  }, $[12] = t7) : t7 = $[12];
  const registerElement = t7;
  let t8;
  $[13] === Symbol.for("react.memo_cache_sentinel") ? (t8 = (id_1) => {
    setElements((prev_0) => {
      if (!prev_0.has(id_1))
        return prev_0;
      const next_0 = new Map(prev_0);
      return next_0.delete(id_1), next_0;
    });
  }, $[13] = t8) : t8 = $[13];
  const unregisterElement = t8;
  let t9;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t9 = {
    containerWidth: window.innerWidth,
    dragOffset: 0,
    panelAfter: null,
    panelBefore: null,
    resizerIndex: -1,
    resizerRect: null,
    startX: 0,
    widths: []
  }, $[14] = t9) : t9 = $[14];
  const dragRef = (0, import_react2.useRef)(t9);
  let t10;
  $[15] !== elements ? (t10 = (id_2, event) => {
    const elementsArr = getSortedElements(elements), index = elementsArr.findIndex((el) => el.id === id_2), resizer = elements.get(id_2);
    if (!resizer || !isResizer(resizer))
      return;
    const resizeElement = resizer.el.current;
    resizeElement && (dragRef.current = {
      resizerIndex: index,
      panelBefore: elementsArr.reduce((acc, el_0, i) => isPanel(el_0) && i < index ? el_0 : acc, null),
      panelAfter: elementsArr.reduce((acc_0, el_1, i_0) => acc_0 === null && isPanel(el_1) && i_0 > index ? el_1 : acc_0, null),
      containerWidth: window.innerWidth,
      startX: event.pageX,
      dragOffset: getOffset(event, resizeElement),
      resizerRect: resizeElement.getBoundingClientRect(),
      widths: panelsRef.current.widths
    }, setActiveResizer(id_2));
  }, $[15] = elements, $[16] = t10) : t10 = $[16];
  const startDragging = t10;
  let t11;
  $[17] === Symbol.for("react.memo_cache_sentinel") ? (t11 = () => {
    setActiveResizer(null);
  }, $[17] = t11) : t11 = $[17];
  const stopDragging = t11;
  let t12;
  $[18] !== elements ? (t12 = (id_3, event_0) => {
    event_0.preventDefault(), event_0.stopPropagation();
    const {
      containerWidth,
      dragOffset,
      panelBefore,
      panelAfter,
      resizerRect
    } = dragRef.current;
    if (panelBefore == null || panelAfter == null)
      return;
    const resizer_0 = elements.get(id_3);
    if (!resizer_0 || !isResizer(resizer_0))
      return;
    const resizeElement_0 = resizer_0.el.current;
    if (!resizeElement_0)
      return;
    const offset = getOffset(event_0, resizeElement_0, dragOffset, resizerRect);
    if (offset === 0)
      return;
    const {
      widths: prevWidths
    } = panelsRef.current, rect = panelsEl.current.getBoundingClientRect(), delta = offset / rect.width * 100, nextWidths = getNextWidths(delta, containerWidth, panelBefore, panelAfter, panelsRef.current, dragRef.current);
    prevWidths.some((prevWidth, i_1) => prevWidth !== nextWidths[i_1]) && setWidths(nextWidths);
  }, $[18] = elements, $[19] = t12) : t12 = $[19];
  const drag = t12;
  let t13, t14;
  $[20] !== elements || $[21] !== panels || $[22] !== widths ? (t13 = () => {
    panelsRef.current.elements = elements, panelsRef.current.panels = panels, panelsRef.current.widths = widths;
  }, t14 = [elements, panels, widths], $[20] = elements, $[21] = panels, $[22] = widths, $[23] = t13, $[24] = t14) : (t13 = $[23], t14 = $[24]), (0, import_react2.useLayoutEffect)(t13, t14);
  const storage = usePanelsStorage();
  let t15, t16;
  $[25] !== panels || $[26] !== storage ? (t15 = () => {
    const {
      widths: widths_0
    } = panelsRef.current;
    if (widths_0.length === panels.length)
      return;
    const storedWidths = storage.get(panels);
    if (storedWidths) {
      const validatedStoredWidths = validateWidths(panels, storedWidths, window.innerWidth);
      setWidths(validatedStoredWidths);
      return;
    }
    const defaultWidths = getDefaultWidths(panels);
    setWidths(defaultWidths);
  }, t16 = [storage, panels], $[25] = panels, $[26] = storage, $[27] = t15, $[28] = t16) : (t15 = $[27], t16 = $[28]), (0, import_react2.useLayoutEffect)(t15, t16);
  let t17, t18;
  $[29] !== panels || $[30] !== storage || $[31] !== widths ? (t17 = () => {
    widths.length && storage.setDebounced(panels, widths);
  }, t18 = [storage, panels, widths], $[29] = panels, $[30] = storage, $[31] = widths, $[32] = t17, $[33] = t18) : (t17 = $[32], t18 = $[33]), (0, import_react2.useEffect)(t17, t18);
  let t19, t20;
  $[34] === Symbol.for("react.memo_cache_sentinel") ? (t19 = () => {
    const resizeObserver = new ResizeObserver(() => {
      const {
        panels: panels_0,
        widths: prevWidths_0
      } = panelsRef.current, nextWidths_0 = validateWidths(panels_0, prevWidths_0, window.innerWidth);
      prevWidths_0.some((prevWidth_0, i_2) => prevWidth_0 !== nextWidths_0[i_2]) && setWidths(nextWidths_0);
    });
    return resizeObserver.observe(panelsEl.current), () => {
      resizeObserver.disconnect();
    };
  }, t20 = [], $[34] = t19, $[35] = t20) : (t19 = $[34], t20 = $[35]), (0, import_react2.useLayoutEffect)(t19, t20);
  let t21, t22;
  $[36] !== activeResizer || $[37] !== drag || $[38] !== getPanelStyle || $[39] !== startDragging ? (t22 = {
    activeResizer,
    drag,
    getPanelStyle,
    registerElement,
    startDragging,
    stopDragging,
    unregisterElement
  }, $[36] = activeResizer, $[37] = drag, $[38] = getPanelStyle, $[39] = startDragging, $[40] = t22) : t22 = $[40], t21 = t22;
  const context = t21;
  let t23;
  $[41] !== children ? (t23 = (0, import_jsx_runtime.jsx)(PanelsWrapper, { ref: panelsEl, children }), $[41] = children, $[42] = t23) : t23 = $[42];
  let t24;
  return $[43] !== context || $[44] !== t23 ? (t24 = (0, import_jsx_runtime.jsx)(PresentationPanelsContext.Provider, { value: context, children: t23 }), $[43] = context, $[44] = t23, $[45] = t24) : t24 = $[45], t24;
};
function ErrorCard(props) {
  const $ = (0, import_react_compiler_runtime.c)(37);
  let children, message, onContinueAnyway, onRetry, restProps;
  $[0] !== props ? ({
    children,
    message,
    onRetry,
    onContinueAnyway,
    ...restProps
  } = props, $[0] = props, $[1] = children, $[2] = message, $[3] = onContinueAnyway, $[4] = onRetry, $[5] = restProps) : (children = $[1], message = $[2], onContinueAnyway = $[3], onRetry = $[4], restProps = $[5]);
  const {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t0;
  $[6] !== t ? (t0 = t("error-card.retry-button.text"), $[6] = t, $[7] = t0) : t0 = $[7];
  let t1;
  $[8] !== onRetry || $[9] !== t0 ? (t1 = (0, import_jsx_runtime.jsx)(Button, { mode: "ghost", onClick: onRetry, text: t0 }), $[8] = onRetry, $[9] = t0, $[10] = t1) : t1 = $[10];
  const retryButton = t1;
  let t2;
  $[11] !== t ? (t2 = t("error-card.continue-button.text"), $[11] = t, $[12] = t2) : t2 = $[12];
  let t3;
  $[13] !== onContinueAnyway || $[14] !== t2 ? (t3 = (0, import_jsx_runtime.jsx)(Button, { mode: "ghost", tone: "critical", onClick: onContinueAnyway, text: t2 }), $[13] = onContinueAnyway, $[14] = t2, $[15] = t3) : t3 = $[15];
  const continueAnywayButton = t3;
  let t4;
  $[16] !== t ? (t4 = t("error-card.title"), $[16] = t, $[17] = t4) : t4 = $[17];
  let t5;
  $[18] !== t4 ? (t5 = (0, import_jsx_runtime.jsx)(Text, { size: 1, weight: "semibold", children: t4 }), $[18] = t4, $[19] = t5) : t5 = $[19];
  let t6;
  $[20] !== message ? (t6 = (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 1, children: message }), $[20] = message, $[21] = t6) : t6 = $[21];
  let t7;
  $[22] !== t5 || $[23] !== t6 ? (t7 = (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
    t5,
    t6
  ] }), $[22] = t5, $[23] = t6, $[24] = t7) : t7 = $[24];
  let t8;
  $[25] !== continueAnywayButton || $[26] !== onContinueAnyway || $[27] !== onRetry || $[28] !== retryButton ? (t8 = onRetry && onContinueAnyway ? (0, import_jsx_runtime.jsxs)(Inline, { space: 2, children: [
    retryButton,
    continueAnywayButton
  ] }) : onRetry ? (0, import_jsx_runtime.jsx)(Box, { children: retryButton }) : onContinueAnyway ? (0, import_jsx_runtime.jsx)(Box, { children: continueAnywayButton }) : null, $[25] = continueAnywayButton, $[26] = onContinueAnyway, $[27] = onRetry, $[28] = retryButton, $[29] = t8) : t8 = $[29];
  let t9;
  $[30] !== children || $[31] !== t7 || $[32] !== t8 ? (t9 = (0, import_jsx_runtime.jsx)(Flex, { align: "center", height: "fill", justify: "center", children: (0, import_jsx_runtime.jsx)(Container, { padding: 4, sizing: "border", width: 0, children: (0, import_jsx_runtime.jsxs)(Stack, { space: 4, children: [
    t7,
    children,
    t8
  ] }) }) }), $[30] = children, $[31] = t7, $[32] = t8, $[33] = t9) : t9 = $[33];
  let t10;
  return $[34] !== restProps || $[35] !== t9 ? (t10 = (0, import_jsx_runtime.jsx)(Card, { height: "fill", ...restProps, children: t9 }), $[34] = restProps, $[35] = t9, $[36] = t10) : t10 = $[36], t10;
}
function encodeQueryString(params = {}) {
  const parts = Object.entries(params).map(([key, value]) => `${key}=${value}`).join("&");
  return parts.length ? `?${parts}` : "";
}
function resolveQueryStringFromParams(nextParams) {
  const allowed = ["comment", "inspect", "instruction", "pathKey", "rev", "since", "template", "view"], safeNextParams = Object.entries(nextParams).filter(([key]) => allowed.includes(key)).reduce((obj, [key, value]) => value == null ? obj : {
    ...obj,
    [key]: value
  }, {});
  return encodeQueryString(safeNextParams);
}
var BackLink = (0, import_react2.forwardRef)(function(props, ref) {
  const $ = (0, import_react_compiler_runtime.c)(11);
  let restProps, searchParams;
  $[0] !== props ? ({
    searchParams,
    ...restProps
  } = props, $[0] = props, $[1] = restProps, $[2] = searchParams) : (restProps = $[1], searchParams = $[2]);
  let t0;
  $[3] !== searchParams ? (t0 = Object.entries(searchParams), $[3] = searchParams, $[4] = t0) : t0 = $[4];
  let t1;
  $[5] !== t0 ? (t1 = {
    type: void 0,
    _searchParams: t0
  }, $[5] = t0, $[6] = t1) : t1 = $[6];
  let t2;
  return $[7] !== ref || $[8] !== restProps || $[9] !== t1 ? (t2 = (0, import_jsx_runtime.jsx)(StateLink, { ...restProps, ref, state: t1, title: void 0 }), $[7] = ref, $[8] = restProps, $[9] = t1, $[10] = t2) : t2 = $[10], t2;
});
var ReferenceChildLink = (0, import_react2.forwardRef)(function(props, ref) {
  const $ = (0, import_react_compiler_runtime.c)(15);
  let documentId, documentType, restProps, searchParams;
  if ($[0] !== props) {
    const {
      documentId: t02,
      documentType: t12,
      parentRefPath,
      template,
      searchParams: t22,
      ...t3
    } = props;
    documentId = t02, documentType = t12, searchParams = t22, restProps = t3, $[0] = props, $[1] = documentId, $[2] = documentType, $[3] = restProps, $[4] = searchParams;
  } else
    documentId = $[1], documentType = $[2], restProps = $[3], searchParams = $[4];
  let t0;
  $[5] !== searchParams ? (t0 = Object.entries(searchParams), $[5] = searchParams, $[6] = t0) : t0 = $[6];
  let t1;
  $[7] !== documentId || $[8] !== documentType || $[9] !== t0 ? (t1 = {
    id: documentId,
    type: documentType,
    _searchParams: t0
  }, $[7] = documentId, $[8] = documentType, $[9] = t0, $[10] = t1) : t1 = $[10];
  let t2;
  return $[11] !== ref || $[12] !== restProps || $[13] !== t1 ? (t2 = (0, import_jsx_runtime.jsx)(StateLink, { ...restProps, ref, state: t1, title: void 0 }), $[11] = ref, $[12] = restProps, $[13] = t1, $[14] = t2) : t2 = $[14], t2;
});
function PresentationPaneRouterProvider(props) {
  const $ = (0, import_react_compiler_runtime.c)(26), {
    children,
    onStructureParams,
    structureParams,
    searchParams,
    refs
  } = props, {
    state: routerState,
    resolvePathFromState
  } = useRouter();
  let t0;
  $[0] !== routerState._searchParams ? (t0 = Object.fromEntries(routerState._searchParams || []), $[0] = routerState._searchParams, $[1] = t0) : t0 = $[1];
  const routerSearchParams = useUnique(t0);
  let t1;
  $[2] !== resolvePathFromState || $[3] !== routerSearchParams || $[4] !== routerState ? (t1 = (nextParams) => {
    const path = resolvePathFromState(routerState), qs = resolveQueryStringFromParams({
      ...routerSearchParams,
      ...nextParams
    });
    return `${path}${qs}`;
  }, $[2] = resolvePathFromState, $[3] = routerSearchParams, $[4] = routerState, $[5] = t1) : t1 = $[5];
  const createPathWithParams = t1;
  let t2, t3;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t3 = {}, $[6] = t3) : t3 = $[6];
  const t4 = structureParams;
  let t5;
  $[7] === Symbol.for("react.memo_cache_sentinel") ? (t5 = [], $[7] = t5) : t5 = $[7];
  let t6;
  $[8] !== refs || $[9] !== searchParams ? (t6 = (childLinkProps) => {
    const {
      childId,
      ...restProps
    } = childLinkProps, ref = refs == null ? void 0 : refs.find((r) => r._id === childId || getPublishedId(r._id) === childId);
    return ref ? (0, import_jsx_runtime.jsx)(StateLink, { ...restProps, state: {
      id: childId,
      type: ref._type,
      _searchParams: Object.entries(searchParams)
    } }) : (0, import_jsx_runtime.jsx)("div", { ...restProps });
  }, $[8] = refs, $[9] = searchParams, $[10] = t6) : t6 = $[10];
  let t7, t8;
  $[11] !== searchParams ? (t7 = (backLinkProps) => (0, import_jsx_runtime.jsx)(BackLink, { ...backLinkProps, searchParams }), t8 = (childLinkProps_0) => (0, import_jsx_runtime.jsx)(ReferenceChildLink, { ...childLinkProps_0, searchParams }), $[11] = searchParams, $[12] = t7, $[13] = t8) : (t7 = $[12], t8 = $[13]);
  let t9;
  $[14] !== onStructureParams ? (t9 = (nextParams_0) => {
    onStructureParams({
      ...nextParams_0,
      inspect: nextParams_0.inspect ?? void 0
    });
  }, $[14] = onStructureParams, $[15] = t9) : t9 = $[15];
  let t10;
  $[16] !== createPathWithParams || $[17] !== t4 || $[18] !== t6 || $[19] !== t7 || $[20] !== t8 || $[21] !== t9 ? (t10 = {
    index: 0,
    groupIndex: 0,
    siblingIndex: 0,
    payload: t3,
    params: t4,
    hasGroupSiblings: false,
    groupLength: 1,
    routerPanesState: t5,
    ChildLink: t6,
    BackLink: t7,
    ReferenceChildLink: t8,
    ParameterizedLink: _temp$d,
    closeCurrentAndAfter: _temp2$7,
    handleEditReference: _temp3$3,
    replaceCurrent: _temp4$2,
    closeCurrent: _temp5$2,
    duplicateCurrent: _temp6$1,
    setView: _temp7$1,
    setParams: t9,
    setPayload: _temp8,
    navigateIntent: _temp9,
    createPathWithParams
  }, $[16] = createPathWithParams, $[17] = t4, $[18] = t6, $[19] = t7, $[20] = t8, $[21] = t9, $[22] = t10) : t10 = $[22], t2 = t10;
  const context = t2;
  let t11;
  return $[23] !== children || $[24] !== context ? (t11 = (0, import_jsx_runtime.jsx)(PaneRouterContext.Provider, { value: context, children }), $[23] = children, $[24] = context, $[25] = t11) : t11 = $[25], t11;
}
function _temp9(intentName, intentParams, options_0) {
  console.warn("navigateIntent", intentName, intentParams, options_0);
}
function _temp8(payload) {
  console.warn("setPayload", payload);
}
function _temp7$1(viewId) {
  console.warn("setView", viewId);
}
function _temp6$1(pane_0) {
  console.warn("duplicateCurrent", pane_0);
}
function _temp5$2() {
  console.warn("closeCurrent");
}
function _temp4$2(pane) {
  console.warn("replaceCurrent", pane);
}
function _temp3$3(options) {
  console.warn("handleEditReference", options);
}
function _temp2$7() {
  console.warn("closeCurrentAndAfter");
}
function _temp$d() {
  throw new Error("ParameterizedLink not implemented");
}
var RootLayout = dt(PaneLayout)`
  height: 100%;
`;
var Root = dt(Flex)`
  & > div {
    min-width: none !important;
    max-width: none !important;
  }
`;
var WrappedCode$1 = dt(Code)`
  white-space: pre-wrap;
`;
function DocumentListPane(props) {
  var _a, _b, _c, _d;
  const $ = (0, import_react_compiler_runtime.c)(33), {
    mainDocumentState,
    onStructureParams,
    searchParams,
    refs
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool();
  let t0, t1;
  if ($[0] !== ((_a = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _a._id) || $[1] !== refs) {
    let t22;
    $[3] !== ((_b = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _b._id) ? (t22 = (r) => {
      var _a2;
      return getPublishedId(r._id) !== ((_a2 = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _a2._id);
    }, $[3] = (_c = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _c._id, $[4] = t22) : t22 = $[4], t1 = refs.filter(t22).map(_temp$c), $[0] = (_d = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _d._id, $[1] = refs, $[2] = t1;
  } else
    t1 = $[2];
  t0 = t1;
  const ids = t0;
  let t2, t3;
  $[5] !== ids ? (t3 = {
    filter: "_id in $ids",
    params: {
      ids
    }
  }, $[5] = ids, $[6] = t3) : t3 = $[6];
  let t4;
  $[7] !== t ? (t4 = t("document-list-pane.document-list.title"), $[7] = t, $[8] = t4) : t4 = $[8];
  let t5;
  $[9] !== t3 || $[10] !== t4 ? (t5 = {
    id: "$root",
    options: t3,
    schemaTypeName: "",
    title: t4,
    type: "documentList"
  }, $[9] = t3, $[10] = t4, $[11] = t5) : t5 = $[11], t2 = t5;
  const pane = t2, [errorParams, setErrorParams] = (0, import_react2.useState)(null);
  let t6;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t6 = () => setErrorParams(null), $[12] = t6) : t6 = $[12];
  const handleRetry = t6, [structureParams] = (0, import_react2.useState)(_temp2$6);
  let t7;
  $[13] === Symbol.for("react.memo_cache_sentinel") ? (t7 = () => setErrorParams(null), $[13] = t7) : t7 = $[13];
  let t8;
  if ($[14] !== refs ? (t8 = [refs], $[14] = refs, $[15] = t8) : t8 = $[15], (0, import_react2.useEffect)(t7, t8), errorParams) {
    let t92;
    $[16] !== t ? (t92 = t("document-list-pane.error.text"), $[16] = t, $[17] = t92) : t92 = $[17];
    let t102;
    $[18] !== devMode || $[19] !== errorParams || $[20] !== t ? (t102 = devMode && (0, import_jsx_runtime.jsx)(Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
      (0, import_jsx_runtime.jsx)(Label, { muted: true, size: 0, children: t("presentation-error.label") }),
      (0, import_jsx_runtime.jsx)(WrappedCode$1, { size: 1, children: errorParams.error.message })
    ] }) }), $[18] = devMode, $[19] = errorParams, $[20] = t, $[21] = t102) : t102 = $[21];
    let t11;
    return $[22] !== t102 || $[23] !== t92 ? (t11 = (0, import_jsx_runtime.jsx)(ErrorCard, { flex: 1, message: t92, onRetry: handleRetry, children: t102 }), $[22] = t102, $[23] = t92, $[24] = t11) : t11 = $[24], t11;
  }
  let t9;
  $[25] !== pane ? (t9 = (0, import_jsx_runtime.jsx)(Root, { direction: "column", flex: 1, children: (0, import_jsx_runtime.jsx)(PaneContainer, { index: 0, itemId: "$root", pane, paneKey: "$root" }) }), $[25] = pane, $[26] = t9) : t9 = $[26];
  let t10;
  return $[27] !== onStructureParams || $[28] !== refs || $[29] !== searchParams || $[30] !== structureParams || $[31] !== t9 ? (t10 = (0, import_jsx_runtime.jsx)(ErrorBoundary, { onCatch: setErrorParams, children: (0, import_jsx_runtime.jsx)(RootLayout, { children: (0, import_jsx_runtime.jsx)(StructureToolProvider, { children: (0, import_jsx_runtime.jsx)(PresentationPaneRouterProvider, { onStructureParams, structureParams, searchParams, refs, children: t9 }) }) }) }), $[27] = onStructureParams, $[28] = refs, $[29] = searchParams, $[30] = structureParams, $[31] = t9, $[32] = t10) : t10 = $[32], t10;
}
function _temp2$6() {
  return {};
}
function _temp$c(r_0) {
  return getPublishedId(r_0._id);
}
var WrappedCode = dt(Code)`
  white-space: pre-wrap;
`;
function DocumentPane2(props) {
  const $ = (0, import_react_compiler_runtime.c)(35), {
    documentId,
    documentType,
    onFocusPath,
    onStructureParams,
    searchParams,
    structureParams
  } = props, {
    template,
    templateParams
  } = structureParams, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool();
  let t0, t1;
  $[0] !== templateParams ? (t1 = decodeJsonParams(templateParams), $[0] = templateParams, $[1] = t1) : t1 = $[1];
  let t2;
  $[2] !== documentId || $[3] !== documentType || $[4] !== t1 || $[5] !== template ? (t2 = {
    id: documentId,
    type: documentType,
    template,
    templateParameters: t1
  }, $[2] = documentId, $[3] = documentType, $[4] = t1, $[5] = template, $[6] = t2) : t2 = $[6];
  let t3;
  $[7] !== documentId || $[8] !== t2 ? (t3 = {
    id: documentId,
    options: t2,
    title: "",
    type: "document"
  }, $[7] = documentId, $[8] = t2, $[9] = t3) : t3 = $[9], t0 = t3;
  const paneDocumentNode = t0, [errorParams, setErrorParams] = (0, import_react2.useState)(null);
  let t4;
  $[10] === Symbol.for("react.memo_cache_sentinel") ? (t4 = () => setErrorParams(null), $[10] = t4) : t4 = $[10];
  const handleRetry = t4;
  let t5;
  $[11] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => {
    setErrorParams(null);
  }, $[11] = t5) : t5 = $[11];
  let t6;
  if ($[12] !== documentId || $[13] !== documentType || $[14] !== structureParams ? (t6 = [documentId, documentType, structureParams], $[12] = documentId, $[13] = documentType, $[14] = structureParams, $[15] = t6) : t6 = $[15], (0, import_react2.useEffect)(t5, t6), errorParams) {
    let t72;
    $[16] !== t ? (t72 = t("document-pane.error.text"), $[16] = t, $[17] = t72) : t72 = $[17];
    let t82;
    $[18] !== devMode || $[19] !== errorParams || $[20] !== t ? (t82 = devMode && (0, import_jsx_runtime.jsx)(Card, { overflow: "auto", padding: 3, radius: 2, tone: "critical", children: (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
      (0, import_jsx_runtime.jsx)(Label, { muted: true, size: 0, children: t("presentation-error.label") }),
      (0, import_jsx_runtime.jsx)(WrappedCode, { size: 1, children: errorParams.error.message })
    ] }) }), $[18] = devMode, $[19] = errorParams, $[20] = t, $[21] = t82) : t82 = $[21];
    let t92;
    return $[22] !== t72 || $[23] !== t82 ? (t92 = (0, import_jsx_runtime.jsx)(ErrorCard, { flex: 1, message: t72, onRetry: handleRetry, children: t82 }), $[22] = t72, $[23] = t82, $[24] = t92) : t92 = $[24], t92;
  }
  let t7;
  $[25] === Symbol.for("react.memo_cache_sentinel") ? (t7 = {
    height: "100%"
  }, $[25] = t7) : t7 = $[25];
  let t8;
  $[26] === Symbol.for("react.memo_cache_sentinel") ? (t8 = (0, import_jsx_runtime.jsx)(PresentationSpinner, {}), $[26] = t8) : t8 = $[26];
  let t9;
  $[27] !== onFocusPath || $[28] !== paneDocumentNode ? (t9 = (0, import_jsx_runtime.jsx)(import_react2.Suspense, { fallback: t8, children: (0, import_jsx_runtime.jsx)(DocumentPane, { paneKey: "document", index: 1, itemId: "document", pane: paneDocumentNode, onFocusPath }) }), $[27] = onFocusPath, $[28] = paneDocumentNode, $[29] = t9) : t9 = $[29];
  let t10;
  return $[30] !== onStructureParams || $[31] !== searchParams || $[32] !== structureParams || $[33] !== t9 ? (t10 = (0, import_jsx_runtime.jsx)(ErrorBoundary, { onCatch: setErrorParams, children: (0, import_jsx_runtime.jsx)(PaneLayout, { style: t7, children: (0, import_jsx_runtime.jsx)(PresentationPaneRouterProvider, { searchParams, onStructureParams, structureParams, children: t9 }) }) }), $[30] = onStructureParams, $[31] = searchParams, $[32] = structureParams, $[33] = t9, $[34] = t10) : t10 = $[34], t10;
}
function DocumentPanel(props) {
  const $ = (0, import_react_compiler_runtime.c)(7), {
    documentId,
    documentType,
    onFocusPath,
    onStructureParams,
    searchParams,
    structureParams
  } = props;
  let t0;
  return $[0] !== documentId || $[1] !== documentType || $[2] !== onFocusPath || $[3] !== onStructureParams || $[4] !== searchParams || $[5] !== structureParams ? (t0 = (0, import_jsx_runtime.jsx)(StructureToolProvider, { children: (0, import_jsx_runtime.jsx)(DocumentPane2, { documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams }) }), $[0] = documentId, $[1] = documentType, $[2] = onFocusPath, $[3] = onStructureParams, $[4] = searchParams, $[5] = structureParams, $[6] = t0) : t0 = $[6], t0;
}
function usePreviewState(documentId, schemaType2) {
  const $ = (0, import_react_compiler_runtime.c)(7), documentPreviewStore = useDocumentPreviewStore();
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const [preview, setPreview] = (0, import_react2.useState)(t0), {
    perspectiveStack
  } = usePerspective();
  let t1, t2;
  return $[1] !== documentId || $[2] !== documentPreviewStore || $[3] !== perspectiveStack || $[4] !== schemaType2 ? (t1 = () => {
    if (!schemaType2)
      return;
    const subscription = getPreviewStateObservable$1(documentPreviewStore, schemaType2, documentId, perspectiveStack).subscribe((state) => {
      setPreview(state);
    });
    return () => {
      subscription == null ? void 0 : subscription.unsubscribe();
    };
  }, t2 = [documentPreviewStore, schemaType2, documentId, perspectiveStack], $[1] = documentId, $[2] = documentPreviewStore, $[3] = perspectiveStack, $[4] = schemaType2, $[5] = t1, $[6] = t2) : (t1 = $[5], t2 = $[6]), (0, import_react2.useEffect)(t1, t2), preview;
}
function ContentEditor(props) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const $ = (0, import_react_compiler_runtime.c)(38), {
    documentId,
    documentType,
    mainDocumentState,
    onFocusPath,
    onStructureParams,
    refs,
    searchParams,
    structureParams
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), schema = useSchema();
  let t0;
  $[0] !== ((_a = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _a._id) || $[1] !== ((_b = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _b._type) || $[2] !== searchParams ? (t0 = (props_0) => {
    var _a2, _b2;
    return (0, import_jsx_runtime.jsx)(StateLink, { ...props_0, state: {
      id: (_a2 = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _a2._id,
      type: (_b2 = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _b2._type,
      _searchParams: Object.entries(searchParams)
    } });
  }, $[0] = (_c = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _c._id, $[1] = (_d = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _d._type, $[2] = searchParams, $[3] = t0) : t0 = $[3];
  const MainDocumentLink = t0;
  let t1, t2;
  $[4] !== ((_e = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _e._type) || $[5] !== schema ? (t2 = schema.get(((_f = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _f._type) || "shoe"), $[4] = (_g = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _g._type, $[5] = schema, $[6] = t2) : t2 = $[6], t1 = t2;
  const schemaType2 = t1, previewState = usePreviewState(((_h = mainDocumentState == null ? void 0 : mainDocumentState.document) == null ? void 0 : _h._id) || "", schemaType2);
  let t3;
  bb0: {
    if (!(mainDocumentState == null ? void 0 : mainDocumentState.document)) {
      t3 = null;
      break bb0;
    }
    let t42;
    $[7] !== mainDocumentState.document || $[8] !== previewState.snapshot ? (t42 = getPreviewValueWithFallback({
      snapshot: previewState.snapshot,
      fallback: mainDocumentState.document
    }), $[7] = mainDocumentState.document, $[8] = previewState.snapshot, $[9] = t42) : t42 = $[9];
    let t52;
    $[10] !== t ? (t52 = t("main-document.label"), $[10] = t, $[11] = t52) : t52 = $[11];
    let t62;
    $[12] !== t52 ? (t62 = (0, import_jsx_runtime.jsx)(Card, { padding: 1, radius: 2, shadow: 1, children: (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 0, weight: "medium", children: t52 }) }), $[12] = t52, $[13] = t62) : t62 = $[13];
    let t7;
    $[14] !== schemaType2 || $[15] !== t42 || $[16] !== t62 ? (t7 = (0, import_jsx_runtime.jsx)(SanityDefaultPreview, { ...t42, schemaType: schemaType2, status: t62 }), $[14] = schemaType2, $[15] = t42, $[16] = t62, $[17] = t7) : t7 = $[17], t3 = t7;
  }
  const preview = t3;
  if (documentId && documentType) {
    let t42;
    return $[18] !== documentId || $[19] !== documentType || $[20] !== onFocusPath || $[21] !== onStructureParams || $[22] !== searchParams || $[23] !== structureParams ? (t42 = (0, import_jsx_runtime.jsx)(DocumentPanel, { documentId, documentType, onFocusPath, onStructureParams, searchParams, structureParams }), $[18] = documentId, $[19] = documentType, $[20] = onFocusPath, $[21] = onStructureParams, $[22] = searchParams, $[23] = structureParams, $[24] = t42) : t42 = $[24], t42;
  }
  let t4;
  $[25] !== MainDocumentLink || $[26] !== mainDocumentState || $[27] !== preview || $[28] !== t ? (t4 = mainDocumentState && (0, import_jsx_runtime.jsx)(Card, { padding: 3, tone: mainDocumentState.document ? "inherit" : "caution", children: mainDocumentState.document ? (0, import_jsx_runtime.jsx)(PreviewCard, { __unstable_focusRing: true, as: MainDocumentLink, "data-as": "a", radius: 2, sizing: "border", tone: "inherit", children: preview }) : (0, import_jsx_runtime.jsx)(Card, { padding: 2, radius: 2, tone: "inherit", children: (0, import_jsx_runtime.jsxs)(Flex, { gap: 3, children: [
    (0, import_jsx_runtime.jsx)(Box, { flex: "none", children: (0, import_jsx_runtime.jsx)(Text, { size: 1, children: (0, import_jsx_runtime.jsx)(WarningOutlineIcon, {}) }) }),
    (0, import_jsx_runtime.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime.jsx)(Text, { size: 1, children: (0, import_jsx_runtime.jsx)(Translate, { t, i18nKey: "main-document.missing.text", components: {
      Code: "code"
    }, values: {
      path: mainDocumentState.path
    } }) }) })
  ] }) }) }), $[25] = MainDocumentLink, $[26] = mainDocumentState, $[27] = preview, $[28] = t, $[29] = t4) : t4 = $[29];
  let t5;
  $[30] !== mainDocumentState || $[31] !== onStructureParams || $[32] !== refs || $[33] !== searchParams ? (t5 = (0, import_jsx_runtime.jsx)(DocumentListPane, { mainDocumentState, onStructureParams, searchParams, refs }), $[30] = mainDocumentState, $[31] = onStructureParams, $[32] = refs, $[33] = searchParams, $[34] = t5) : t5 = $[34];
  let t6;
  return $[35] !== t4 || $[36] !== t5 ? (t6 = (0, import_jsx_runtime.jsxs)(Flex, { direction: "column", flex: 1, height: "fill", children: [
    t4,
    t5
  ] }), $[35] = t4, $[36] = t5, $[37] = t6) : t6 = $[37], t6;
}
function usePanelId(id) {
  const $ = (0, import_react_compiler_runtime.c)(2);
  let t0;
  $[0] !== id ? (t0 = () => id || v4_default2(), $[0] = id, $[1] = t0) : t0 = $[1];
  const [panelId] = (0, import_react2.useState)(t0);
  return panelId;
}
var Resizer = dt.div`
  position: relative;
`;
var ResizerInner = dt.div`
  position: absolute;
  top: 0;
  bottom: 0;
  left: -5px;
  width: 9px;
  z-index: 10;
  cursor: ${({
  $disabled
}) => $disabled ? "auto" : "ew-resize"};

  /* Border */
  & > span:nth-child(1) {
    display: block;
    border-left: 1px solid var(--card-border-color);
    position: absolute;
    top: 0;
    left: 4px;
    bottom: 0;
    transition: opacity 200ms;
  }

  ${({
  $disabled
}) => !$disabled && `
    /* Hover effect */
    & > span:nth-child(2) {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 9px;
      bottom: 0;
      background-color: var(--card-border-color);
      opacity: 0;
      transition: opacity 150ms;
    }

    @media (hover: hover) {
      &:hover > span:nth-child(2) {
        opacity: 0.2;
      }
    }
  `}
`;
var PanelResizer = function(t0) {
  const $ = (0, import_react_compiler_runtime.c)(27), {
    id: propId,
    order,
    disabled: t1
  } = t0, disabled = t1 === void 0 ? false : t1, el = (0, import_react2.useRef)(null), context = (0, import_react2.useContext)(PresentationPanelsContext);
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  const id = usePanelId(propId), {
    activeResizer,
    drag,
    startDragging,
    stopDragging,
    registerElement,
    unregisterElement
  } = context, isDragging = activeResizer === id;
  if (context === null)
    throw Error("Panel components must be rendered within a PanelGroup container");
  let t2;
  $[0] !== id || $[1] !== startDragging ? (t2 = (event) => {
    startDragging(id, event.nativeEvent);
  }, $[0] = id, $[1] = startDragging, $[2] = t2) : t2 = $[2];
  const onMouseDown = t2;
  let t3;
  $[3] !== drag || $[4] !== id ? (t3 = (e) => {
    drag(id, e);
  }, $[3] = drag, $[4] = id, $[5] = t3) : t3 = $[5];
  const onDrag = t3;
  let t4;
  $[6] !== stopDragging ? (t4 = () => {
    el.current.blur(), stopDragging();
  }, $[6] = stopDragging, $[7] = t4) : t4 = $[7];
  const onDragStop = t4;
  let t5, t6;
  $[8] !== disabled || $[9] !== isDragging || $[10] !== onDrag || $[11] !== onDragStop ? (t5 = () => {
    if (!isDragging || disabled)
      return;
    const resetDocumentStyles = function() {
      const bodyStyle = document.body.style, documentStyle = document.documentElement.style, {
        cursor
      } = documentStyle, {
        userSelect
      } = bodyStyle;
      return documentStyle.cursor = "ew-resize", bodyStyle.userSelect = "none", () => {
        cursor ? documentStyle.cursor = cursor : documentStyle.removeProperty("cursor"), userSelect ? bodyStyle.userSelect = userSelect : bodyStyle.removeProperty("user-select");
      };
    }();
    return window.addEventListener("mousemove", onDrag), window.addEventListener("mouseup", onDragStop), window.addEventListener("contextmenu", onDragStop), () => {
      resetDocumentStyles(), window.removeEventListener("mousemove", onDrag), window.removeEventListener("mouseup", onDragStop), window.removeEventListener("contextmenu", onDragStop);
    };
  }, t6 = [disabled, isDragging, onDrag, onDragStop], $[8] = disabled, $[9] = isDragging, $[10] = onDrag, $[11] = onDragStop, $[12] = t5, $[13] = t6) : (t5 = $[12], t6 = $[13]), (0, import_react2.useEffect)(t5, t6);
  let t7, t8;
  $[14] !== id || $[15] !== order || $[16] !== registerElement || $[17] !== unregisterElement ? (t7 = () => (registerElement(id, {
    id,
    order,
    type: "resizer",
    el
  }), () => {
    unregisterElement(id);
  }), t8 = [id, order, registerElement, unregisterElement], $[14] = id, $[15] = order, $[16] = registerElement, $[17] = unregisterElement, $[18] = t7, $[19] = t8) : (t7 = $[18], t8 = $[19]), (0, import_react2.useLayoutEffect)(t7, t8);
  let t10, t9;
  $[20] === Symbol.for("react.memo_cache_sentinel") ? (t9 = (0, import_jsx_runtime.jsx)("span", {}), t10 = (0, import_jsx_runtime.jsx)("span", {}), $[20] = t10, $[21] = t9) : (t10 = $[20], t9 = $[21]);
  let t11;
  $[22] !== disabled ? (t11 = (0, import_jsx_runtime.jsxs)(ResizerInner, { $disabled: disabled, children: [
    t9,
    t10
  ] }), $[22] = disabled, $[23] = t11) : t11 = $[23];
  let t12;
  return $[24] !== onMouseDown || $[25] !== t11 ? (t12 = (0, import_jsx_runtime.jsx)(Resizer, { onMouseDown, ref: el, children: t11 }), $[24] = onMouseDown, $[25] = t11, $[26] = t12) : t12 = $[26], t12;
};
var PresentationContentWrapper = (props) => {
  const $ = (0, import_react_compiler_runtime.c)(8), {
    documentId,
    setDisplayedDocument,
    getCommentIntent
  } = props;
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = (0, import_jsx_runtime.jsx)(PanelResizer, { order: 4 }), $[0] = t0) : t0 = $[0];
  let t1;
  $[1] !== getCommentIntent || $[2] !== props.children ? (t1 = (0, import_jsx_runtime.jsx)(CommentsIntentProvider, { getIntent: getCommentIntent, children: props.children }), $[1] = getCommentIntent, $[2] = props.children, $[3] = t1) : t1 = $[3];
  let t2;
  return $[4] !== documentId || $[5] !== setDisplayedDocument || $[6] !== t1 ? (t2 = (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    t0,
    (0, import_jsx_runtime.jsx)(Panel, { id: "content", minWidth: 325, order: 5, children: (0, import_jsx_runtime.jsx)(DisplayedDocumentBroadcasterProvider, { documentId, setDisplayedDocument, children: t1 }) })
  ] }), $[4] = documentId, $[5] = setDisplayedDocument, $[6] = t1, $[7] = t2) : t2 = $[7], t2;
};
var PresentationContent = (props) => {
  const $ = (0, import_react_compiler_runtime.c)(14), {
    documentId,
    documentsOnPage,
    documentType,
    getCommentIntent,
    mainDocumentState,
    onFocusPath,
    onStructureParams,
    searchParams,
    setDisplayedDocument,
    structureParams
  } = props;
  let t0;
  $[0] !== documentId || $[1] !== documentType || $[2] !== documentsOnPage || $[3] !== mainDocumentState || $[4] !== onFocusPath || $[5] !== onStructureParams || $[6] !== searchParams || $[7] !== structureParams ? (t0 = (0, import_jsx_runtime.jsx)(ContentEditor, { documentId, documentType, mainDocumentState, onFocusPath, onStructureParams, refs: documentsOnPage, searchParams, structureParams }), $[0] = documentId, $[1] = documentType, $[2] = documentsOnPage, $[3] = mainDocumentState, $[4] = onFocusPath, $[5] = onStructureParams, $[6] = searchParams, $[7] = structureParams, $[8] = t0) : t0 = $[8];
  let t1;
  return $[9] !== documentId || $[10] !== getCommentIntent || $[11] !== setDisplayedDocument || $[12] !== t0 ? (t1 = (0, import_jsx_runtime.jsx)(PresentationContentWrapper, { documentId, getCommentIntent, setDisplayedDocument, children: t0 }), $[9] = documentId, $[10] = getCommentIntent, $[11] = setDisplayedDocument, $[12] = t0, $[13] = t1) : t1 = $[13], t1;
};
var PresentationNavigateProvider = function(props) {
  const $ = (0, import_react_compiler_runtime.c)(5), {
    children,
    navigate: _navigate
  } = props;
  let t0;
  $[0] !== _navigate ? (t0 = (preview, t12) => {
    _navigate((t12 === void 0 ? void 0 : t12) || {}, preview ? {
      preview
    } : {});
  }, $[0] = _navigate, $[1] = t0) : t0 = $[1];
  const navigate = t0;
  let t1;
  return $[2] !== children || $[3] !== navigate ? (t1 = (0, import_jsx_runtime.jsx)(PresentationNavigateContext.Provider, { value: navigate, children }), $[2] = children, $[3] = navigate, $[4] = t1) : t1 = $[4], t1;
};
function useLocalState(key, defaultValue) {
  const $ = (0, import_react_compiler_runtime.c)(9);
  let t0;
  $[0] !== defaultValue || $[1] !== key ? (t0 = () => JSON.parse(localStorage.getItem(key) ?? JSON.stringify(defaultValue)), $[0] = defaultValue, $[1] = key, $[2] = t0) : t0 = $[2];
  const [value, setValue] = (0, import_react2.useState)(t0);
  let t1, t2;
  $[3] !== key || $[4] !== value ? (t1 = () => {
    localStorage.setItem(key, JSON.stringify(value));
  }, t2 = [key, value], $[3] = key, $[4] = value, $[5] = t1, $[6] = t2) : (t1 = $[5], t2 = $[6]), (0, import_react2.useEffect)(t1, t2);
  let t3;
  return $[7] !== value ? (t3 = [value, setValue], $[7] = value, $[8] = t3) : t3 = $[8], t3;
}
function usePresentationNavigator(props) {
  const $ = (0, import_react_compiler_runtime.c)(11), {
    unstable_navigator
  } = props, navigatorProvided = !!(unstable_navigator == null ? void 0 : unstable_navigator.component), [_navigatorEnabled, setNavigatorEnabled] = useLocalState("presentation/navigator", navigatorProvided), navigatorEnabled = navigatorProvided ? _navigatorEnabled : false;
  let t0;
  bb0: {
    if (!navigatorProvided) {
      t0 = void 0;
      break bb0;
    }
    let t12;
    $[0] !== setNavigatorEnabled ? (t12 = () => setNavigatorEnabled(_temp$b), $[0] = setNavigatorEnabled, $[1] = t12) : t12 = $[1], t0 = t12;
  }
  const toggleNavigator = t0;
  let t1;
  $[2] !== navigatorEnabled || $[3] !== unstable_navigator ? (t1 = function() {
    return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: navigatorEnabled && (0, import_jsx_runtime.jsx)(Navigator, { ...unstable_navigator }) });
  }, $[2] = navigatorEnabled, $[3] = unstable_navigator, $[4] = t1) : t1 = $[4];
  const Component = t1;
  let t2;
  $[5] !== navigatorEnabled || $[6] !== toggleNavigator ? (t2 = {
    navigatorEnabled,
    toggleNavigator
  }, $[5] = navigatorEnabled, $[6] = toggleNavigator, $[7] = t2) : t2 = $[7];
  let t3;
  return $[8] !== Component || $[9] !== t2 ? (t3 = [t2, Component], $[8] = Component, $[9] = t2, $[10] = t3) : t3 = $[10], t3;
}
function _temp$b(enabled) {
  return !enabled;
}
function NavigatorComponent(props) {
  const $ = (0, import_react_compiler_runtime.c)(11), {
    minWidth,
    maxWidth,
    component: NavigatorComponent2
  } = props, navigatorDisabled = minWidth != null && maxWidth != null && minWidth === maxWidth;
  let t0;
  $[0] !== NavigatorComponent2 ? (t0 = (0, import_jsx_runtime.jsx)(NavigatorComponent2, {}), $[0] = NavigatorComponent2, $[1] = t0) : t0 = $[1];
  let t1;
  $[2] !== maxWidth || $[3] !== minWidth || $[4] !== t0 ? (t1 = (0, import_jsx_runtime.jsx)(Panel, { id: "navigator", minWidth, maxWidth, order: 1, children: t0 }), $[2] = maxWidth, $[3] = minWidth, $[4] = t0, $[5] = t1) : t1 = $[5];
  let t2;
  $[6] !== navigatorDisabled ? (t2 = (0, import_jsx_runtime.jsx)(PanelResizer, { order: 2, disabled: navigatorDisabled }), $[6] = navigatorDisabled, $[7] = t2) : t2 = $[7];
  let t3;
  return $[8] !== t1 || $[9] !== t2 ? (t3 = (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    t1,
    t2
  ] }), $[8] = t1, $[9] = t2, $[10] = t3) : t3 = $[10], t3;
}
var Navigator = (0, import_react2.memo)(NavigatorComponent);
var PresentationParamsProvider = function(props) {
  const $ = (0, import_react_compiler_runtime.c)(3), {
    children,
    params
  } = props;
  let t0;
  t0 = params;
  const context = t0;
  let t1;
  return $[0] !== children || $[1] !== context ? (t1 = (0, import_jsx_runtime.jsx)(PresentationParamsContext.Provider, { value: context, children }), $[0] = children, $[1] = context, $[2] = t1) : t1 = $[2], t1;
};
var PresentationProvider = function(props) {
  const $ = (0, import_react_compiler_runtime.c)(10), {
    children,
    devMode,
    name,
    navigate,
    params,
    searchParams,
    structureParams
  } = props;
  let t0, t1;
  $[0] !== devMode || $[1] !== name || $[2] !== navigate || $[3] !== params || $[4] !== searchParams || $[5] !== structureParams ? (t1 = {
    devMode,
    name,
    navigate,
    params,
    searchParams,
    structureParams
  }, $[0] = devMode, $[1] = name, $[2] = navigate, $[3] = params, $[4] = searchParams, $[5] = structureParams, $[6] = t1) : t1 = $[6], t0 = t1;
  const context = t0;
  let t2;
  return $[7] !== children || $[8] !== context ? (t2 = (0, import_jsx_runtime.jsx)(PresentationContext.Provider, { value: context, children }), $[7] = children, $[8] = context, $[9] = t2) : t2 = $[9], t2;
};
function useAllowPatterns(previewUrlRef) {
  const allowPatterns = useSelector(previewUrlRef, _temp$a);
  if (!Array.isArray(allowPatterns))
    throw new TypeError("allowPatterns must be an array");
  return allowPatterns;
}
function _temp$a(state) {
  return state.context.allowOrigins;
}
function encodeStudioPerspective(studioPerspective) {
  return Array.isArray(studioPerspective) ? studioPerspective.join(",") : studioPerspective;
}
function useId() {
  const $ = (0, import_react_compiler_runtime.c)(2), id = (0, import_react2.useId)();
  let t0;
  return $[0] !== id ? (t0 = id.startsWith(":") ? id.replace(/^:(.+):$/, "«$1»") : id, $[0] = id, $[1] = t0) : t0 = $[1], t0;
}
var IFrame = (0, import_react2.forwardRef)(function(props, forwardedRef) {
  const $ = (0, import_react_compiler_runtime.c)(19), {
    animate,
    initial,
    onLoad,
    preventClick,
    src,
    variants,
    style
  } = props, ref = (0, import_react2.useRef)(null);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = () => ref.current, $[0] = t0) : t0 = $[0], (0, import_react2.useImperativeHandle)(forwardedRef, t0);
  let t1, t2;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t1 = () => {
    if (!ref.current)
      return;
    const instance = ref.current, handleBlur = function() {
      instance === document.activeElement && instance.dispatchEvent(new MouseEvent("mousedown", {
        bubbles: true,
        cancelable: true
      }));
    };
    return window.addEventListener("blur", handleBlur), () => {
      window.removeEventListener("blur", handleBlur);
    };
  }, t2 = [], $[1] = t1, $[2] = t2) : (t1 = $[1], t2 = $[2]), (0, import_react2.useEffect)(t1, t2);
  const viewTransitionName = useId();
  let t3;
  $[3] !== style || $[4] !== viewTransitionName ? (t3 = {
    ...style,
    viewTransitionName
  }, $[3] = style, $[4] = viewTransitionName, $[5] = t3) : t3 = $[5];
  let t4;
  $[6] !== animate || $[7] !== initial || $[8] !== onLoad || $[9] !== src || $[10] !== t3 || $[11] !== variants ? (t4 = (0, import_jsx_runtime.jsx)(IFrameElement, { style: t3, animate, initial, onLoad, ref, src, variants }), $[6] = animate, $[7] = initial, $[8] = onLoad, $[9] = src, $[10] = t3, $[11] = variants, $[12] = t4) : t4 = $[12];
  let t5;
  $[13] !== preventClick ? (t5 = preventClick && (0, import_jsx_runtime.jsx)(IFrameOverlay, {}), $[13] = preventClick, $[14] = t5) : t5 = $[14];
  let t6;
  $[15] === Symbol.for("react.memo_cache_sentinel") ? (t6 = (0, import_jsx_runtime.jsx)(GlobalViewTransition, {}), $[15] = t6) : t6 = $[15];
  let t7;
  return $[16] !== t4 || $[17] !== t5 ? (t7 = (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    t4,
    t5,
    t6
  ] }), $[16] = t4, $[17] = t5, $[18] = t7) : t7 = $[18], t7;
});
var IFrameElement = motion.create(dt.iframe`
  box-shadow: 0 0 0 1px var(--card-border-color);
  border: 0;
  max-height: 100%;
  width: 100%;
  view-transition-class: presentation-tool-iframe;
`);
var IFrameOverlay = dt(Box)`
  position: absolute;
  inset: 0;
  background: transparent;
`;
var GlobalViewTransition = ft`
html:active-view-transition-type(sanity-iframe-viewport) {
  view-transition-name: none;
  &::view-transition {
    pointer-events: none;
  }
  /* &::view-transition-old(root) {
    display: none;
  }
  &::view-transition-new(root) {
    animation: none;
  } */
}
`;
function OpenPreviewButton(props) {
  const $ = (0, import_react_compiler_runtime.c)(16), {
    openPopup,
    previewLocationOrigin,
    previewLocationRoute,
    perspective,
    targetOrigin
  } = props;
  let t0;
  const url = new URL(previewLocationRoute, previewLocationOrigin || targetOrigin);
  url.searchParams.set(urlSearchParamPreviewPerspective, encodeStudioPerspective(perspective));
  const {
    pathname,
    search
  } = url;
  t0 = `${previewLocationOrigin}${pathname}${search}`;
  const openPreviewLink = t0, {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t1;
  $[0] !== openPopup ? (t1 = (event) => {
    event.preventDefault(), openPopup(event.currentTarget.href);
  }, $[0] = openPopup, $[1] = t1) : t1 = $[1];
  const handleOpenPopup = t1;
  let t2;
  $[2] !== t ? (t2 = t("share-url.menu-item.open.text"), $[2] = t, $[3] = t2) : t2 = $[3];
  let t3;
  $[4] !== t2 ? (t3 = (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t2 }), $[4] = t2, $[5] = t3) : t3 = $[5];
  let t4;
  $[6] === Symbol.for("react.memo_cache_sentinel") ? (t4 = ["bottom-start"], $[6] = t4) : t4 = $[6];
  let t5;
  $[7] !== t ? (t5 = t("share-url.menu-item.open.text"), $[7] = t, $[8] = t5) : t5 = $[8];
  let t6;
  $[9] !== handleOpenPopup || $[10] !== openPreviewLink || $[11] !== t5 ? (t6 = (0, import_jsx_runtime.jsx)(Button, { as: "a", "aria-label": t5, icon: LaunchIcon, mode: "bleed", href: openPreviewLink, rel: "opener", target: "_blank", tooltipProps: null, onClick: handleOpenPopup }), $[9] = handleOpenPopup, $[10] = openPreviewLink, $[11] = t5, $[12] = t6) : t6 = $[12];
  let t7;
  return $[13] !== t3 || $[14] !== t6 ? (t7 = (0, import_jsx_runtime.jsx)(Tooltip, { animate: true, content: t3, fallbackPlacements: t4, placement: "bottom", portal: true, children: t6 }), $[13] = t3, $[14] = t6, $[15] = t7) : t7 = $[15], t7;
}
function useTargetOrigin(previewUrlRef) {
  const targetOrigin = useSelector(previewUrlRef, _temp$9);
  if (!targetOrigin)
    throw new TypeError("targetOrigin is required");
  return targetOrigin;
}
function _temp$9(state) {
  var _a;
  return (_a = state.context.previewUrl) == null ? void 0 : _a.origin;
}
function PreviewLocationInput(props) {
  var _a;
  const $ = (0, import_react_compiler_runtime.c)(32), {
    fontSize: t0,
    onChange,
    padding: t1,
    prefix,
    suffix,
    value,
    previewUrlRef
  } = props, fontSize = t0 === void 0 ? 1 : t0, padding = t1 === void 0 ? 3 : t1, allowOrigins = useAllowPatterns(previewUrlRef), targetOrigin = useTargetOrigin(previewUrlRef), {
    t
  } = useTranslation(presentationLocaleNamespace), {
    basePath: t2
  } = ((_a = useActiveWorkspace()) == null ? void 0 : _a.activeWorkspace) || {}, basePath = t2 === void 0 ? "/" : t2, inputRef = (0, import_react2.useRef)(null), [sessionValue, setSessionValue] = (0, import_react2.useState)(void 0), [customValidity, setCustomValidity] = (0, import_react2.useState)(void 0);
  let t3;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t3 = (event) => {
    setSessionValue(event.currentTarget.value);
  }, $[0] = t3) : t3 = $[0];
  const handleChange = t3;
  let t4;
  $[1] !== allowOrigins || $[2] !== basePath || $[3] !== onChange || $[4] !== sessionValue || $[5] !== t || $[6] !== targetOrigin ? (t4 = (event_0) => {
    var _a2;
    if (event_0.key === "Enter") {
      if (sessionValue === void 0)
        return;
      let absoluteValue = sessionValue;
      try {
        absoluteValue = new URL(sessionValue, targetOrigin).toString();
      } catch {
      }
      if (Array.isArray(allowOrigins)) {
        if (!allowOrigins.some((pattern) => pattern.test(absoluteValue))) {
          setCustomValidity(t("preview-location-input.error", {
            origin: targetOrigin,
            context: "origin-not-allowed"
          })), event_0.currentTarget.reportValidity();
          return;
        }
      } else if (!targetOrigin && (absoluteValue.startsWith(`${basePath}/`) || absoluteValue === basePath)) {
        setCustomValidity(t("preview-location-input.error", {
          basePath,
          context: "same-base-path"
        }));
        return;
      }
      const nextValue = absoluteValue === targetOrigin ? `${targetOrigin}/` : absoluteValue;
      setCustomValidity(void 0), setSessionValue(void 0), onChange(nextValue), (_a2 = inputRef.current) == null ? void 0 : _a2.blur();
    }
    event_0.key === "Escape" && (setCustomValidity(void 0), setSessionValue(void 0));
  }, $[1] = allowOrigins, $[2] = basePath, $[3] = onChange, $[4] = sessionValue, $[5] = t, $[6] = targetOrigin, $[7] = t4) : t4 = $[7];
  const handleKeyDown = t4;
  let t5;
  $[8] === Symbol.for("react.memo_cache_sentinel") ? (t5 = () => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, $[8] = t5) : t5 = $[8];
  const handleBlur = t5;
  let t6;
  $[9] !== targetOrigin || $[10] !== value ? (t6 = () => {
    setCustomValidity(void 0);
    let nextValue_0 = value;
    try {
      nextValue_0 = new URL(value, targetOrigin).toString();
    } catch {
    }
    setSessionValue(nextValue_0);
  }, $[9] = targetOrigin, $[10] = value, $[11] = t6) : t6 = $[11];
  const handleClear = t6;
  let t7;
  $[12] === Symbol.for("react.memo_cache_sentinel") ? (t7 = () => {
    setCustomValidity(void 0), setSessionValue(void 0);
  }, $[12] = t7) : t7 = $[12];
  let t8;
  $[13] !== targetOrigin || $[14] !== value ? (t8 = [targetOrigin, value], $[13] = targetOrigin, $[14] = value, $[15] = t8) : t8 = $[15], (0, import_react2.useEffect)(t7, t8);
  let t9, t10;
  $[16] === Symbol.for("react.memo_cache_sentinel") ? (t10 = {
    icon: ResetIcon
  }, $[16] = t10) : t10 = $[16], t9 = t10;
  const t11 = customValidity ? t9 : void 0;
  let t12;
  $[17] === Symbol.for("react.memo_cache_sentinel") ? (t12 = {
    zIndex: 1
  }, $[17] = t12) : t12 = $[17];
  let t13;
  $[18] !== sessionValue || $[19] !== targetOrigin || $[20] !== value ? (t13 = sessionValue === void 0 ? new URL(value, targetOrigin).toString() : sessionValue, $[18] = sessionValue, $[19] = targetOrigin, $[20] = value, $[21] = t13) : t13 = $[21];
  let t14;
  return $[22] !== customValidity || $[23] !== fontSize || $[24] !== handleClear || $[25] !== handleKeyDown || $[26] !== padding || $[27] !== prefix || $[28] !== suffix || $[29] !== t11 || $[30] !== t13 ? (t14 = (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (0, import_jsx_runtime.jsx)(TextInput, { clearButton: t11, customValidity, fontSize, onBlur: handleBlur, onClear: handleClear, onChange: handleChange, onKeyDownCapture: handleKeyDown, padding, prefix, style: t12, radius: 2, ref: inputRef, space: padding, suffix, value: t13 }) }), $[22] = customValidity, $[23] = fontSize, $[24] = handleClear, $[25] = handleKeyDown, $[26] = padding, $[27] = prefix, $[28] = suffix, $[29] = t11, $[30] = t13, $[31] = t14) : t14 = $[31], t14;
}
var QRCodeSVG = (0, import_react2.lazy)(() => import("./QRCodeSVG-2JTPMDKY.js"));
var QrCodeLogoSize = 24;
var QrCodeLogoPadding = 16;
var QrSize = 224;
var StyledSanityMonogram = dt(SanityMonogram)`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  height: ${QrCodeLogoSize}px;
  width: ${QrCodeLogoSize}px;
`;
var MotionSpinner = motion.create(Spinner);
var MotionText = motion.create(Text);
var MotionMonogram = motion.create(StyledSanityMonogram);
var SharePreviewMenu = (0, import_react2.memo)(function(props) {
  const {
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    initialUrl,
    previewLocationRoute,
    perspective
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace), {
    push: pushToast
  } = useToast(), client = useClient({
    apiVersion: API_VERSION
  }), currentUser = useCurrentUser(), [loading, setLoading] = (0, import_react2.useState)(true), [enabling, setEnabling] = (0, import_react2.useState)(false), [disabling, setDisabling] = (0, import_react2.useState)(false), [secret, setSecret] = (0, import_react2.useState)(null), busy = enabling || disabling || loading, url = (0, import_react2.useMemo)(() => secret ? setSecretSearchParams(initialUrl, secret, previewLocationRoute, encodeStudioPerspective(perspective)) : null, [initialUrl, perspective, previewLocationRoute, secret]), [error, setError] = (0, import_react2.useState)(null);
  if (error)
    throw error;
  const handleUnableToToggle = (0, import_react2.useCallback)(() => {
    pushToast({
      closable: true,
      status: "warning",
      title: t("share-preview-menu.error_toggle-sharing", {
        context: "toggle-sharing"
      })
    });
  }, [pushToast, t]), handleDisableSharing = (0, import_react2.useCallback)(async () => {
    try {
      setDisabling(true), await disablePreviewAccessSharing(client, "sanity/presentation", typeof window > "u" ? "" : location.href, currentUser == null ? void 0 : currentUser.id), setSecret(null);
    } catch (error_0) {
      setError(error_0);
    } finally {
      setDisabling(false);
    }
  }, [client, currentUser == null ? void 0 : currentUser.id]), handleEnableSharing = (0, import_react2.useCallback)(async () => {
    try {
      setEnabling(true);
      const previewUrlSecret = await enablePreviewAccessSharing(client, "sanity/presentation", typeof window > "u" ? "" : location.href, currentUser == null ? void 0 : currentUser.id);
      setSecret(previewUrlSecret.secret);
    } catch (error_1) {
      setError(error_1);
    } finally {
      setEnabling(false);
    }
  }, [client, currentUser == null ? void 0 : currentUser.id]), handleCopyUrl = (0, import_react2.useCallback)(() => {
    try {
      if (!url)
        throw new Error("No URL to copy");
      navigator.clipboard.writeText(url.toString()), pushToast({
        closable: true,
        status: "success",
        title: t("share-url.clipboard.status", {
          context: "success"
        })
      });
    } catch (error_2) {
      setError(error_2);
    }
  }, [pushToast, t, url]);
  return (0, import_react2.useEffect)(() => {
    let controller = new AbortController(), usedTags = [];
    async function fetchShareSecret(lastLiveEventId, signal) {
      const {
        result,
        syncTags
      } = await client.fetch(fetchSharedAccessQuery, {}, {
        filterResponse: false,
        lastLiveEventId,
        tag: "presentation.fetch-shared-access-secret"
      });
      Array.isArray(syncTags) && (usedTags = syncTags), signal.aborted || setSecret(result);
    }
    const subscription = client.live.events().subscribe({
      next: (event) => {
        event.type === "message" && (controller.abort(), controller = new AbortController(), event.tags.some((tag2) => usedTags.includes(tag2)) && fetchShareSecret(event.id, controller.signal));
      },
      error: setError
    });
    return fetchShareSecret(null, controller.signal).finally(() => setLoading(false)), () => {
      subscription.unsubscribe(), controller.abort();
    };
  }, [client]), (0, import_jsx_runtime.jsx)(MenuButton, { button: (0, import_jsx_runtime.jsx)(Button, { "aria-label": t("preview-frame.share-button.aria-label"), icon: ShareIcon, mode: "bleed", tooltipProps: null }), id: "share-menu", menu: (0, import_jsx_runtime.jsx)(Menu, { style: {
    maxWidth: 248
  }, padding: canUseSharedPreviewAccess ? void 0 : 0, children: canUseSharedPreviewAccess ? (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)("label", { style: {
      cursor: "pointer"
    }, children: (0, import_jsx_runtime.jsxs)(Grid, { columns: 2, rows: 2, gapX: 3, gapY: 1, style: {
      justifyContent: "center",
      alignItems: "center",
      gridTemplateColumns: "min-content 1fr",
      gridTemplateRows: "min-content"
    }, paddingTop: 3, paddingX: 3, children: [
      (0, import_jsx_runtime.jsx)(Tooltip, { animate: true, content: (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t("share-preview-menu.toggle-button.tooltip", {
        context: url ? "disable" : "enable"
      }) }), fallbackPlacements: ["bottom-start"], placement: "bottom", portal: true, children: (0, import_jsx_runtime.jsx)(Switch, { checked: enabling || url !== null && !disabling, readOnly: enabling || disabling, indeterminate: loading, onChange: canToggleSharePreviewAccess ? url ? handleDisableSharing : handleEnableSharing : handleUnableToToggle }) }),
      (0, import_jsx_runtime.jsx)(Text, { size: 1, weight: "medium", children: t("share-preview-menu.toggle-button.label", {
        context: "first-line"
      }) }),
      (0, import_jsx_runtime.jsx)("span", {}),
      (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 1, children: t("share-preview-menu.toggle-button.label", {
        context: "second-line"
      }) })
    ] }) }),
    (0, import_jsx_runtime.jsx)(Box, { padding: 3, paddingTop: 2, children: (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
      (0, import_jsx_runtime.jsx)(Card, { tone: busy || !url ? "transparent" : void 0, style: {
        position: "relative",
        aspectRatio: "1 / 1",
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }, children: (0, import_jsx_runtime.jsx)(AnimatePresence, { children: busy ? (0, import_jsx_runtime.jsx)(MotionSpinner, { muted: true, initial: {
        opacity: 0
      }, animate: {
        opacity: 1
      }, exit: {
        opacity: 0
      } }) : url ? (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: (0, import_jsx_runtime.jsxs)(import_react2.Suspense, { fallback: (0, import_jsx_runtime.jsx)(Spinner, {}), children: [
        (0, import_jsx_runtime.jsx)(QRCodeSVG, { title: t("share-preview-menu.qr-code.title", {
          url: url.toString()
        }), value: url.toString(), size: QrSize, color: "var(--card-fg-color)", logoSize: QrCodeLogoSize + QrCodeLogoPadding }),
        (0, import_jsx_runtime.jsx)(MotionMonogram, { initial: {
          opacity: -0.5
        }, animate: {
          opacity: 1.5
        }, exit: {
          opacity: 0
        } })
      ] }) }) : (0, import_jsx_runtime.jsx)(MotionText, { muted: true, size: 1, style: {
        maxWidth: "100px",
        textWrap: "pretty",
        textAlign: "center"
      }, initial: {
        opacity: 0
      }, animate: {
        opacity: 1
      }, exit: {
        opacity: 0
      }, children: t("share-preview-menu.qr-code.placeholder") }) }) }),
      (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 1, children: t("share-preview-menu.qr-code.instructions") })
    ] }) }),
    (0, import_jsx_runtime.jsx)(MenuDivider, {}),
    (0, import_jsx_runtime.jsx)(MenuItem, { disabled: !url || disabling, icon: CopyIcon, onClick: handleCopyUrl, text: t("share-preview-menu.copy-url.text") })
  ] }) : (0, import_jsx_runtime.jsx)(Card, { padding: 2, tone: "caution", radius: 3, children: (0, import_jsx_runtime.jsx)(Text, { style: {
    textWrap: "pretty"
  }, children: t("share-preview-menu.error", {
    context: "missing-grants"
  }) }) }) }), popover: {
    constrainSize: true,
    placement: "bottom",
    portal: true
  } });
});
SharePreviewMenu.displayName = "Memo(SharePreviewMenu)";
var PreviewHeaderDefault = (props) => {
  const $ = (0, import_react_compiler_runtime.c)(107), {
    canSharePreviewAccess,
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    iframeRef,
    initialUrl,
    navigatorEnabled,
    onPathChange,
    onRefresh,
    openPopup,
    overlaysConnection,
    presentationRef,
    perspective,
    previewUrl,
    setViewport,
    targetOrigin,
    toggleNavigator,
    toggleOverlay,
    viewport,
    previewUrlRef
  } = props, {
    t
  } = useTranslation(presentationLocaleNamespace);
  let t0;
  $[0] !== setViewport || $[1] !== viewport ? (t0 = () => setViewport(viewport === "desktop" ? "mobile" : "desktop"), $[0] = setViewport, $[1] = viewport, $[2] = t0) : t0 = $[2];
  const toggleViewportSize = t0;
  let t1;
  t1 = targetOrigin === location.origin ? "" : targetOrigin;
  const previewLocationOrigin = t1;
  let t2;
  $[3] !== iframeRef || $[4] !== onRefresh || $[5] !== presentationRef || $[6] !== previewUrl || $[7] !== targetOrigin ? (t2 = () => {
    onRefresh(() => {
      iframeRef.current && (presentationRef.send({
        type: "iframe reload"
      }), Object.assign(iframeRef.current, {
        src: `${targetOrigin}${previewUrl || "/"}`
      }));
    });
  }, $[3] = iframeRef, $[4] = onRefresh, $[5] = presentationRef, $[6] = previewUrl, $[7] = targetOrigin, $[8] = t2) : t2 = $[8];
  const handleRefresh = t2, isLoading = useSelector(presentationRef, _temp$8), isLoaded = useSelector(presentationRef, _temp2$5), isRefreshing = useSelector(presentationRef, _temp3$2), isReloading = useSelector(presentationRef, _temp4$1), overlaysEnabled = useSelector(presentationRef, _temp5$1);
  let t3;
  const previewURL = new URL(previewUrl || "/", targetOrigin), {
    pathname,
    search
  } = withoutSecretSearchParams(previewURL);
  t3 = `${pathname}${search}`;
  const previewLocationRoute = t3, perspectiveToggleTooltipId = useId(), previewUrlBusy = useSelector(previewUrlRef, _temp6);
  let t4;
  $[9] === Symbol.for("react.memo_cache_sentinel") ? (t4 = {
    width: "100%"
  }, $[9] = t4) : t4 = $[9];
  let t5;
  $[10] !== navigatorEnabled || $[11] !== t || $[12] !== toggleNavigator ? (t5 = toggleNavigator && (0, import_jsx_runtime.jsx)(Button, { "aria-label": t("preview-frame.navigator.toggle-button.aria-label"), icon: PanelLeftIcon, mode: "bleed", onClick: toggleNavigator, selected: navigatorEnabled, tooltipProps: {
    content: (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t("preview-frame.navigator.toggle-button.tooltip") }),
    fallbackPlacements: ["bottom-start"],
    placement: "bottom"
  } }), $[10] = navigatorEnabled, $[11] = t, $[12] = toggleNavigator, $[13] = t5) : t5 = $[13];
  let t6;
  $[14] === Symbol.for("react.memo_cache_sentinel") ? (t6 = {
    whiteSpace: "nowrap"
  }, $[14] = t6) : t6 = $[14];
  const t7 = overlaysEnabled ? "disable" : "enable";
  let t8;
  $[15] !== t || $[16] !== t7 ? (t8 = t("preview-frame.overlay.toggle-button.tooltip", {
    context: t7
  }), $[15] = t, $[16] = t7, $[17] = t8) : t8 = $[17];
  let t9;
  $[18] !== t8 ? (t9 = (0, import_jsx_runtime.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t8 }) }), $[18] = t8, $[19] = t9) : t9 = $[19];
  let t10;
  $[20] === Symbol.for("react.memo_cache_sentinel") ? (t10 = (0, import_jsx_runtime.jsx)(Box, { paddingY: 1, children: (0, import_jsx_runtime.jsx)(Hotkeys, { keys: ["Alt"], style: {
    marginTop: -4,
    marginBottom: -4
  } }) }), $[20] = t10) : t10 = $[20];
  let t11;
  $[21] !== t9 ? (t11 = (0, import_jsx_runtime.jsxs)(Flex, { align: "center", style: t6, children: [
    t9,
    t10
  ] }), $[21] = t9, $[22] = t11) : t11 = $[22];
  let t12;
  $[23] === Symbol.for("react.memo_cache_sentinel") ? (t12 = ["bottom-start"], $[23] = t12) : t12 = $[23];
  let t13;
  $[24] === Symbol.for("react.memo_cache_sentinel") ? (t13 = {
    lineHeight: 0,
    borderRadius: 999,
    userSelect: "none"
  }, $[24] = t13) : t13 = $[24];
  const t14 = overlaysEnabled ? "transparent" : void 0;
  let t15;
  $[25] === Symbol.for("react.memo_cache_sentinel") ? (t15 = {
    margin: -4
  }, $[25] = t15) : t15 = $[25];
  const t16 = !isLoaded, t17 = isLoading || overlaysConnection !== "connected";
  let t18;
  $[26] !== overlaysEnabled || $[27] !== t16 || $[28] !== t17 || $[29] !== toggleOverlay ? (t18 = (0, import_jsx_runtime.jsx)("div", { style: t15, children: (0, import_jsx_runtime.jsx)(Switch, { indeterminate: t16, checked: overlaysEnabled, onChange: toggleOverlay, disabled: t17 }) }), $[26] = overlaysEnabled, $[27] = t16, $[28] = t17, $[29] = toggleOverlay, $[30] = t18) : t18 = $[30];
  const t19 = !overlaysEnabled;
  let t20;
  $[31] !== t ? (t20 = t("preview-frame.overlay.toggle-button.text"), $[31] = t, $[32] = t20) : t20 = $[32];
  let t21;
  $[33] !== t19 || $[34] !== t20 ? (t21 = (0, import_jsx_runtime.jsx)(Box, { children: (0, import_jsx_runtime.jsx)(Text, { muted: t19, size: 1, weight: "medium", children: t20 }) }), $[33] = t19, $[34] = t20, $[35] = t21) : t21 = $[35];
  let t22;
  $[36] !== t18 || $[37] !== t21 ? (t22 = (0, import_jsx_runtime.jsxs)(Flex, { align: "center", gap: 3, children: [
    t18,
    t21
  ] }), $[36] = t18, $[37] = t21, $[38] = t22) : t22 = $[38];
  let t23;
  $[39] !== t14 || $[40] !== t22 ? (t23 = (0, import_jsx_runtime.jsx)(Card, { as: "label", flex: "none", padding: 3, marginX: 1, style: t13, tone: t14, children: t22 }), $[39] = t14, $[40] = t22, $[41] = t23) : t23 = $[41];
  let t24;
  $[42] !== t11 || $[43] !== t23 ? (t24 = (0, import_jsx_runtime.jsx)(Tooltip, { animate: true, content: t11, fallbackPlacements: t12, placement: "bottom", portal: true, children: t23 }), $[42] = t11, $[43] = t23, $[44] = t24) : t24 = $[44];
  let t25;
  $[45] !== isLoaded || $[46] !== isLoading || $[47] !== isRefreshing || $[48] !== isReloading || $[49] !== t ? (t25 = isLoaded ? t("preview-frame.refresh-button.tooltip") : t("preview-frame.status", {
    context: isLoading ? "loading" : isRefreshing ? "refreshing" : isReloading ? "reloading" : "unknown"
  }), $[45] = isLoaded, $[46] = isLoading, $[47] = isRefreshing, $[48] = isReloading, $[49] = t, $[50] = t25) : t25 = $[50];
  let t26;
  $[51] !== t25 ? (t26 = (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t25 }), $[51] = t25, $[52] = t26) : t26 = $[52];
  let t27;
  $[53] === Symbol.for("react.memo_cache_sentinel") ? (t27 = ["bottom-end"], $[53] = t27) : t27 = $[53];
  let t28;
  $[54] !== t ? (t28 = t("preview-frame.refresh-button.aria-label"), $[54] = t, $[55] = t28) : t28 = $[55];
  const t29 = isReloading || isRefreshing || previewUrlBusy;
  let t30;
  $[56] !== handleRefresh || $[57] !== t28 || $[58] !== t29 ? (t30 = (0, import_jsx_runtime.jsx)(Button, { "aria-label": t28, icon: RefreshIcon, mode: "bleed", loading: t29, onClick: handleRefresh, tooltipProps: null }), $[56] = handleRefresh, $[57] = t28, $[58] = t29, $[59] = t30) : t30 = $[59];
  let t31;
  $[60] !== t26 || $[61] !== t30 ? (t31 = (0, import_jsx_runtime.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime.jsx)(Tooltip, { animate: true, content: t26, fallbackPlacements: t27, placement: "bottom", portal: true, children: t30 }) }), $[60] = t26, $[61] = t30, $[62] = t31) : t31 = $[62];
  let t32;
  $[63] !== openPopup || $[64] !== perspective || $[65] !== previewLocationOrigin || $[66] !== previewLocationRoute || $[67] !== targetOrigin ? (t32 = (0, import_jsx_runtime.jsx)(Box, { padding: 1, children: (0, import_jsx_runtime.jsx)(OpenPreviewButton, { openPopup, previewLocationOrigin, previewLocationRoute, perspective, targetOrigin }) }), $[63] = openPopup, $[64] = perspective, $[65] = previewLocationOrigin, $[66] = previewLocationRoute, $[67] = targetOrigin, $[68] = t32) : t32 = $[68];
  let t33;
  $[69] !== onPathChange || $[70] !== previewLocationRoute || $[71] !== previewUrlRef || $[72] !== t31 || $[73] !== t32 ? (t33 = (0, import_jsx_runtime.jsx)(Box, { flex: 1, children: (0, import_jsx_runtime.jsx)(PreviewLocationInput, { previewUrlRef, prefix: t31, onChange: onPathChange, suffix: t32, value: previewLocationRoute }) }), $[69] = onPathChange, $[70] = previewLocationRoute, $[71] = previewUrlRef, $[72] = t31, $[73] = t32, $[74] = t33) : t33 = $[74];
  let t34;
  $[75] !== perspectiveToggleTooltipId ? (t34 = (node) => {
    node == null ? void 0 : node.style.setProperty("view-transition-name", perspectiveToggleTooltipId);
  }, $[75] = perspectiveToggleTooltipId, $[76] = t34) : t34 = $[76];
  const t35 = viewport === "desktop" ? "narrow" : "full";
  let t36;
  $[77] !== t || $[78] !== t35 ? (t36 = t("preview-frame.viewport-button.tooltip", {
    context: t35
  }), $[77] = t, $[78] = t35, $[79] = t36) : t36 = $[79];
  let t37;
  $[80] !== t36 ? (t37 = (0, import_jsx_runtime.jsx)(Text, { size: 1, children: t36 }), $[80] = t36, $[81] = t37) : t37 = $[81];
  let t38;
  $[82] === Symbol.for("react.memo_cache_sentinel") ? (t38 = ["bottom-start"], $[82] = t38) : t38 = $[82];
  let t39;
  $[83] !== t ? (t39 = t("preview-frame.viewport-button.aria-label"), $[83] = t, $[84] = t39) : t39 = $[84];
  const t40 = viewport === "desktop" ? MobileDeviceIcon : DesktopIcon;
  let t41;
  $[85] !== t39 || $[86] !== t40 || $[87] !== toggleViewportSize || $[88] !== viewport ? (t41 = (0, import_jsx_runtime.jsx)(Button, { "data-testid": "preview-viewport-toggle", "data-viewport": viewport, "aria-label": t39, icon: t40, mode: "bleed", onClick: toggleViewportSize, tooltipProps: null }), $[85] = t39, $[86] = t40, $[87] = toggleViewportSize, $[88] = viewport, $[89] = t41) : t41 = $[89];
  let t42;
  $[90] !== t34 || $[91] !== t37 || $[92] !== t41 ? (t42 = (0, import_jsx_runtime.jsx)(Flex, { align: "center", flex: "none", gap: 1, children: (0, import_jsx_runtime.jsx)(Tooltip, { animate: true, ref: t34, content: t37, fallbackPlacements: t38, placement: "bottom", portal: true, children: t41 }) }), $[90] = t34, $[91] = t37, $[92] = t41, $[93] = t42) : t42 = $[93];
  let t43;
  $[94] !== canSharePreviewAccess || $[95] !== canToggleSharePreviewAccess || $[96] !== canUseSharedPreviewAccess || $[97] !== initialUrl || $[98] !== perspective || $[99] !== previewLocationRoute ? (t43 = canSharePreviewAccess && (0, import_jsx_runtime.jsx)(Flex, { align: "center", flex: "none", gap: 1, children: (0, import_jsx_runtime.jsx)(SharePreviewMenu, { canToggleSharePreviewAccess, canUseSharedPreviewAccess, previewLocationRoute, initialUrl, perspective }) }), $[94] = canSharePreviewAccess, $[95] = canToggleSharePreviewAccess, $[96] = canUseSharedPreviewAccess, $[97] = initialUrl, $[98] = perspective, $[99] = previewLocationRoute, $[100] = t43) : t43 = $[100];
  let t44;
  return $[101] !== t24 || $[102] !== t33 || $[103] !== t42 || $[104] !== t43 || $[105] !== t5 ? (t44 = (0, import_jsx_runtime.jsxs)(Flex, { align: "center", gap: 1, paddingX: 1, style: t4, children: [
    t5,
    t24,
    t33,
    t42,
    t43
  ] }), $[101] = t24, $[102] = t33, $[103] = t42, $[104] = t43, $[105] = t5, $[106] = t44) : t44 = $[106], t44;
};
function PreviewHeader(props) {
  var _a;
  const $ = (0, import_react_compiler_runtime.c)(7), renderDefault = _temp7, HeaderComponent = (_a = props.options) == null ? void 0 : _a.component;
  let t0;
  $[0] !== HeaderComponent || $[1] !== props ? (t0 = HeaderComponent ? (0, import_jsx_runtime.jsx)(HeaderComponent, { ...props, renderDefault }) : renderDefault(props), $[0] = HeaderComponent, $[1] = props, $[2] = t0) : t0 = $[2];
  const header = t0;
  let t1;
  $[3] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {
    position: "relative"
  }, $[3] = t1) : t1 = $[3];
  let t2;
  $[4] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    minHeight: 0
  }, $[4] = t2) : t2 = $[4];
  let t3;
  return $[5] !== header ? (t3 = (0, import_jsx_runtime.jsx)(Card, { flex: "none", padding: 2, borderBottom: true, style: t1, children: (0, import_jsx_runtime.jsx)(Flex, { align: "center", style: t2, children: header }) }), $[5] = header, $[6] = t3) : t3 = $[6], t3;
}
function _temp7(props_0) {
  return (0, import_jsx_runtime.jsx)(PreviewHeaderDefault, { ...props_0 });
}
function _temp$8(state) {
  return state.matches("loading");
}
function _temp2$5(state_0) {
  return state_0.matches("loaded");
}
function _temp3$2(state_1) {
  return state_1.matches({
    loaded: "refreshing"
  });
}
function _temp4$1(state_2) {
  return state_2.matches({
    loaded: "reloading"
  });
}
function _temp5$1(state_3) {
  return state_3.context.visualEditingOverlaysEnabled;
}
function _temp6(state_4) {
  return state_4.hasTag("busy");
}
var MotionFlex = motion.create(Flex);
var Preview = (0, import_react2.memo)((0, import_react2.forwardRef)(function(props, forwardedRef) {
  const {
    header,
    initialUrl,
    loadersConnection,
    overlaysConnection,
    perspective,
    viewport,
    vercelProtectionBypass,
    presentationRef,
    previewUrlRef
  } = props, [stablePerspective, setStablePerspective] = (0, import_react2.useState)(null), urlPerspective = encodeStudioPerspective(stablePerspective === null ? perspective : stablePerspective), previewUrl = (0, import_react2.useMemo)(() => {
    const url = new URL(initialUrl);
    return url.searchParams.get(urlSearchParamPreviewPerspective) || url.searchParams.set(urlSearchParamPreviewPerspective, urlPerspective), (vercelProtectionBypass || url.searchParams.get(urlSearchParamVercelProtectionBypass)) && url.searchParams.set(urlSearchParamVercelSetBypassCookie, "samesitenone"), vercelProtectionBypass && !url.searchParams.get(urlSearchParamVercelProtectionBypass) && url.searchParams.set(urlSearchParamVercelProtectionBypass, vercelProtectionBypass), url;
  }, [initialUrl, urlPerspective, vercelProtectionBypass]);
  (0, import_react2.useEffect)(() => {
    loadersConnection === "connected" && setStablePerspective((prev) => prev === null ? perspective : prev);
  }, [loadersConnection, perspective]);
  const {
    t
  } = useTranslation(presentationLocaleNamespace), {
    devMode
  } = usePresentationTool(), prefersReducedMotion = usePrefersReducedMotion(), ref = (0, import_react2.useRef)(null), previewHeader = (0, import_jsx_runtime.jsx)(PreviewHeader, { ...props, iframeRef: ref, options: header });
  (0, import_react2.useImperativeHandle)(forwardedRef, () => ref.current);
  const isLoading = useSelector(presentationRef, (state) => state.matches("loading") || state.matches({
    loaded: "reloading"
  })), [timedOut, setTimedOut] = (0, import_react2.useState)(false), isRefreshing = useSelector(presentationRef, (state_0) => state_0.matches({
    loaded: "refreshing"
  })), [somethingIsWrong, setSomethingIsWrong] = (0, import_react2.useState)(false), iframeIsBusy = isLoading || isRefreshing || overlaysConnection === "connecting", handleRetry = (0, import_react2.useCallback)(() => {
    ref.current && (ref.current.src = previewUrl.toString(), presentationRef.send({
      type: "iframe reload"
    }));
  }, [presentationRef, previewUrl]), handleContinueAnyway = (0, import_react2.useCallback)(() => {
    setContinueAnyway(true);
  }, []), [continueAnyway, setContinueAnyway] = (0, import_react2.useState)(false), [showOverlaysConnectionStatus, setShowOverlaysConnectionState] = (0, import_react2.useState)(false);
  (0, import_react2.useEffect)(() => {
    if (!(isLoading || isRefreshing) && (overlaysConnection === "connecting" || overlaysConnection === "reconnecting")) {
      const timeout = setTimeout(() => {
        setShowOverlaysConnectionState(true);
      }, 5e3);
      return () => clearTimeout(timeout);
    }
  }, [overlaysConnection, isLoading, isRefreshing]), (0, import_react2.useEffect)(() => {
    if (!(isLoading || isRefreshing || !showOverlaysConnectionStatus)) {
      if (overlaysConnection === "connected" && (setSomethingIsWrong(false), setShowOverlaysConnectionState(false), setTimedOut(false), setContinueAnyway(false)), overlaysConnection === "connecting") {
        const timeout_0 = setTimeout(() => {
          setTimedOut(true), console.error("Unable to connect to visual editing. Make sure you've setup '@sanity/visual-editing' correctly");
        }, MAX_TIME_TO_OVERLAYS_CONNECTION);
        return () => clearTimeout(timeout_0);
      }
      if (overlaysConnection === "reconnecting") {
        const timeout_1 = setTimeout(() => {
          setTimedOut(true), setSomethingIsWrong(true);
        }, MAX_TIME_TO_OVERLAYS_CONNECTION);
        return () => clearTimeout(timeout_1);
      }
    }
  }, [isLoading, overlaysConnection, isRefreshing, showOverlaysConnectionStatus]);
  const onIFrameLoad = (0, import_react2.useCallback)(() => {
    presentationRef.send({
      type: "iframe loaded"
    });
  }, [presentationRef]), preventIframeInteraction = (0, import_react2.useMemo)(() => (isLoading || overlaysConnection === "connecting" && !isRefreshing) && !continueAnyway, [continueAnyway, isLoading, isRefreshing, overlaysConnection]), canUseViewTransition = (0, import_react2.useSyncExternalStore)(
    // eslint-disable-next-line no-empty-function
    (0, import_react2.useCallback)(() => () => {
    }, []),
    () => CSS.supports("(view-transition-name: test)")
  ), iframeAnimations = (0, import_react2.useMemo)(() => [
    preventIframeInteraction ? "background" : "active",
    isLoading ? "reloading" : "idle",
    // If CSS View Transitions are supported, then transition iframe viewport dimensions with that instead of Motion
    canUseViewTransition ? "" : viewport,
    showOverlaysConnectionStatus && !continueAnyway ? "timedOut" : ""
  ], [canUseViewTransition, continueAnyway, isLoading, preventIframeInteraction, showOverlaysConnectionStatus, viewport]), [currentViewport, setCurrentViewport] = (0, import_react2.useState)(viewport), [iframeStyle, setIframeStyle] = (0, import_react2.useState)(iframeVariants[viewport]);
  (0, import_react2.useEffect)(() => {
    if (canUseViewTransition && viewport !== currentViewport) {
      const update = () => {
        setCurrentViewport(viewport), setIframeStyle(iframeVariants[viewport]);
      };
      !prefersReducedMotion && "startViewTransition" in document && typeof document.startViewTransition == "function" ? document.startViewTransition({
        // @ts-expect-error - fix typings
        update: () => (0, import_react_dom.flushSync)(() => update()),
        types: ["sanity-iframe-viewport"]
      }) : update();
    }
  }, [canUseViewTransition, prefersReducedMotion, currentViewport, viewport]);
  const toast = useToast(), allowOrigins = useAllowPatterns(previewUrlRef), [checkOrigin, setCheckOrigin] = (0, import_react2.useState)(false), [reportedMismatches] = (0, import_react2.useState)(/* @__PURE__ */ new Set()), reportMismatchingOrigin = useEffectEvent((reportedOrigin) => {
    if (allowOrigins.some((allow) => allow.test(reportedOrigin))) {
      setCheckOrigin(reportedOrigin);
      return;
    }
    reportedMismatches.has(reportedOrigin) || (reportedMismatches.add(reportedOrigin), console.warn("Visual Editing is here but misconfigured", {
      reportedOrigin
    }), toast.push({
      closable: true,
      id: `presentation-iframe-origin-mismatch-${reportedOrigin}`,
      status: "error",
      duration: 1 / 0,
      title: t("preview-frame.configuration.error.title"),
      description: (0, import_jsx_runtime.jsx)(Translate, { t, i18nKey: "preview-frame.configuration.error.description", components: {
        Code: "code"
      }, values: {
        targetOrigin: previewUrl.origin,
        reportedOrigin
      } })
    }));
  }), navigate = usePresentationNavigate(), navigateEvent = useEffectEvent((url_0) => {
    if (!checkOrigin) return;
    const nextUrl = new URL(url_0, checkOrigin);
    navigate(`${checkOrigin}${nextUrl.pathname}${nextUrl.search}${nextUrl.hash}`);
  });
  return (0, import_react2.useEffect)(() => {
    var _a;
    if (!checkOrigin)
      return;
    const target = (_a = ref.current) == null ? void 0 : _a.contentWindow;
    if (!target)
      return;
    const controller = createController({
      targetOrigin: checkOrigin
    });
    controller.addTarget(target);
    const comlink = controller.createChannel({
      name: "presentation",
      heartbeat: true,
      connectTo: "visual-editing"
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    comlink.on("visual-editing/navigate", (data) => {
      navigateEvent(data.url);
    });
    const stop = comlink.start();
    return () => {
      stop(), controller.destroy();
    };
  }, [checkOrigin]), (0, import_react2.useEffect)(() => {
    if (overlaysConnection === "connecting" || overlaysConnection === "reconnecting") {
      const interval = setInterval(() => {
        var _a, _b;
        (_b = (_a = ref.current) == null ? void 0 : _a.contentWindow) == null ? void 0 : _b.postMessage(
          {
            domain: "sanity/channels",
            from: "presentation",
            type: "presentation/status"
          },
          /**
           * The targetOrigin is set to '*' intentionally here, as we need to find out if the iframe is misconfigured and has the wrong origin
           */
          "*"
        );
      }, 1e3), controller_0 = new AbortController();
      return window.addEventListener("message", ({
        data: data_0
      }) => {
        data_0 && typeof data_0 == "object" && "domain" in data_0 && data_0.domain === "sanity/channels" && "type" in data_0 && data_0.type === "visual-editing/status" && "data" in data_0 && typeof data_0.data == "object" && data_0.data && "origin" in data_0.data && typeof data_0.data.origin == "string" && reportMismatchingOrigin(data_0.data.origin);
      }, {
        signal: controller_0.signal
      }), () => {
        controller_0.abort(), clearInterval(interval);
      };
    }
  }, [overlaysConnection, timedOut]), (0, import_jsx_runtime.jsx)(MotionConfig, { transition: prefersReducedMotion ? {
    duration: 0
  } : void 0, children: (0, import_jsx_runtime.jsxs)(TooltipDelayGroupProvider, { children: [
    previewHeader,
    (0, import_jsx_runtime.jsx)(Card, { flex: 1, tone: "transparent", children: (0, import_jsx_runtime.jsxs)(Flex, { align: "center", height: "fill", justify: "center", padding: (canUseViewTransition ? currentViewport : viewport) === "desktop" ? 0 : 2, sizing: "border", style: {
      position: "relative",
      cursor: iframeIsBusy ? "wait" : void 0
    }, children: [
      (0, import_jsx_runtime.jsx)(AnimatePresence, { children: !somethingIsWrong && !isLoading && !isRefreshing && // viewport, // using CSS View Transitions instead of framer motion to drive this
      showOverlaysConnectionStatus && !continueAnyway ? (0, import_jsx_runtime.jsx)(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: spinnerVariants, justify: "center", align: "center", style: {
        inset: "0",
        position: "absolute",
        backdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
        transition: "backdrop-filter 0.2s ease-in-out",
        // @TODO Because of Safari we have to do this
        WebkitBackdropFilter: timedOut ? "blur(16px) saturate(0.5) grayscale(0.5)" : "blur(2px)",
        WebkitTransition: "-webkit-backdrop-filter 0.2s ease-in-out",
        zIndex: 1
      }, children: (0, import_jsx_runtime.jsxs)(Flex, { style: {
        ...sizes[viewport]
      }, justify: "center", align: "center", direction: "column", gap: 4, children: [
        timedOut && (0, import_jsx_runtime.jsx)(Button, { disabled: true, mode: "ghost", text: t("preview-frame.continue-button.text"), style: {
          opacity: 0
        } }),
        (0, import_jsx_runtime.jsx)(Card, { radius: 2, tone: timedOut ? "caution" : "inherit", padding: 4, shadow: 1, children: (0, import_jsx_runtime.jsxs)(Flex, { justify: "center", align: "center", direction: "column", gap: 4, children: [
          (0, import_jsx_runtime.jsx)(Spinner, { muted: true }),
          (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 1, children: timedOut ? t("preview-frame.status", {
            context: "timeout"
          }) : t("preview-frame.status", {
            context: "connecting"
          }) })
        ] }) }),
        timedOut && (0, import_jsx_runtime.jsx)(
          Button,
          {
            tone: "critical",
            onClick: handleContinueAnyway,
            text: t("preview-frame.continue-button.text")
          }
        )
      ] }) }) : (isLoading || overlaysConnection === "connecting" && !isRefreshing) && !continueAnyway ? (0, import_jsx_runtime.jsx)(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: spinnerVariants, justify: "center", align: "center", style: {
        inset: "0",
        position: "absolute"
        // boxShadow: '0 0 0 1px var(--card-shadow-outline-color)',
      }, children: (0, import_jsx_runtime.jsxs)(Flex, { style: {
        ...sizes[viewport]
      }, justify: "center", align: "center", direction: "column", gap: 4, children: [
        (0, import_jsx_runtime.jsx)(Spinner, { muted: true }),
        (0, import_jsx_runtime.jsx)(Text, { muted: true, size: 1, children: t("preview-frame.status", {
          context: "loading"
        }) })
      ] }) }) : somethingIsWrong && !continueAnyway ? (0, import_jsx_runtime.jsx)(MotionFlex, { initial: "initial", animate: "animate", exit: "exit", variants: errorVariants, justify: "center", align: "center", style: {
        background: "var(--card-bg-color)",
        inset: "0",
        position: "absolute"
      }, children: (0, import_jsx_runtime.jsx)(ErrorCard, { flex: 1, message: t("preview-frame.connection.error.text"), onRetry: handleRetry, onContinueAnyway: handleContinueAnyway, children: devMode && (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        overlaysConnection !== "connected" && (0, import_jsx_runtime.jsx)(Card, { padding: 3, radius: 2, tone: "critical", children: (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
          (0, import_jsx_runtime.jsx)(Label, { muted: true, size: 0, children: t("preview-frame.overlay.connection-status.label") }),
          (0, import_jsx_runtime.jsx)(Code, { size: 1, children: t("channel.status", {
            context: overlaysConnection
          }) })
        ] }) }),
        loadersConnection !== "connected" && (0, import_jsx_runtime.jsx)(Card, { padding: 3, radius: 2, tone: "critical", children: (0, import_jsx_runtime.jsxs)(Stack, { space: 3, children: [
          (0, import_jsx_runtime.jsx)(Label, { muted: true, size: 0, children: t("preview-frame.loader.connection-status.label") }),
          (0, import_jsx_runtime.jsx)(Code, { size: 1, children: t("channel.status", {
            context: loadersConnection
          }) })
        ] }) })
      ] }) }) }) : null }),
      (0, import_jsx_runtime.jsx)(IFrame, { animate: iframeAnimations, initial: ["background"], onLoad: onIFrameLoad, preventClick: preventIframeInteraction, ref, src: previewUrl.toString(), style: iframeStyle, variants: iframeVariants })
    ] }) })
  ] }) });
}));
Preview.displayName = "Memo(ForwardRef(Preview))";
var sizes = {
  desktop: {
    width: "100%",
    height: "100%"
  },
  mobile: {
    width: 375,
    height: 650
  }
};
var spinnerVariants = {
  initial: {
    opacity: 1
  },
  animate: {
    opacity: [0, 0, 1]
  },
  exit: {
    opacity: [1, 0, 0]
  }
};
var errorVariants = {
  initial: {
    opacity: 1
  },
  animate: {
    opacity: [0, 0, 1]
  },
  exit: {
    opacity: [1, 0, 0]
  }
};
var iframeVariants = {
  desktop: {
    ...sizes.desktop,
    boxShadow: "0 0 0 0px var(--card-border-color)"
  },
  mobile: {
    ...sizes.mobile,
    boxShadow: "0 0 0 1px var(--card-border-color)"
  },
  background: {
    opacity: 0,
    scale: 1
  },
  idle: {
    scale: 1
  },
  reloading: {
    scale: [1, 1, 1, 0.98]
  },
  active: {
    opacity: [0, 0, 1],
    scale: 1
  },
  timedOut: {
    opacity: [0, 0, 1]
  }
};
function defineWarnOnce() {
  let warned = false;
  return (...args) => {
    warned || (console.warn(...args), warned = true);
  };
}
var warnOnceAboutCrossDatasetReference = defineWarnOnce();
function useDocumentsOnPage(perspective, frameStateRef) {
  const $ = (0, import_react_compiler_runtime.c)(9);
  validateApiPerspective(perspective);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {}, $[0] = t0) : t0 = $[0];
  const [published, setPublished] = (0, import_react2.useState)(t0);
  let t1;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t1 = {}, $[1] = t1) : t1 = $[1];
  const [previewDrafts, setPreviewDrafts] = (0, import_react2.useState)(t1), urlRef = (0, import_react2.useRef)("");
  let t2;
  $[2] !== frameStateRef ? (t2 = (key, perspective_0, t32) => {
    const documents = (t32 === void 0 ? [] : t32).filter(_temp$7);
    (perspective_0 === "published" ? setPublished : setPreviewDrafts)((cache) => {
      const next = {};
      for (const document2 of documents)
        next[document2._id] = document2;
      if (urlRef.current !== frameStateRef.current.url)
        return urlRef.current = frameStateRef.current.url, {
          [key]: next
        };
      const prev = cache[key];
      return (0, import_fast_deep_equal.default)(prev, next) ? cache : {
        ...cache,
        [key]: next
      };
    });
  }, $[2] = frameStateRef, $[3] = t2) : t2 = $[3];
  const setDocumentsOnPage = t2;
  let t3;
  const keyedCache = perspective === "published" ? published : previewDrafts;
  let t4;
  if ($[4] !== keyedCache) {
    const uniqueDocuments = Object.values(keyedCache).reduce(_temp2$4, {});
    t4 = Object.values(uniqueDocuments), $[4] = keyedCache, $[5] = t4;
  } else
    t4 = $[5];
  t3 = t4;
  const documentsOnPage = t3;
  let t5;
  return $[6] !== documentsOnPage || $[7] !== setDocumentsOnPage ? (t5 = [documentsOnPage, setDocumentsOnPage], $[6] = documentsOnPage, $[7] = setDocumentsOnPage, $[8] = t5) : t5 = $[8], t5;
}
function _temp2$4(acc, cache_0) {
  return Object.values(cache_0).forEach((doc) => {
    acc[doc._id] = doc;
  }), acc;
}
function _temp$7(sourceDocument) {
  return "_projectId" in sourceDocument && sourceDocument._projectId ? (warnOnceAboutCrossDatasetReference("Cross dataset references are not supported yet, ignoring source document", sourceDocument), false) : sourceDocument;
}
function fnOrObj(arg, context) {
  return arg instanceof Function ? arg(context) : arg;
}
function getQueryFromResult(resolver, context) {
  var _a;
  if (resolver.resolve) {
    const filter = (_a = resolver.resolve(context)) == null ? void 0 : _a.filter;
    return filter ? `// groq
*[${filter}][0]{_id, _type}` : void 0;
  }
  return "type" in resolver ? `// groq
*[_type == "${resolver.type}"][0]{_id, _type}` : `// groq
*[${fnOrObj(resolver.filter, context)}][0]{_id, _type}`;
}
function getParamsFromResult(resolver, context) {
  var _a;
  return resolver.resolve ? ((_a = resolver.resolve(context)) == null ? void 0 : _a.params) ?? context.params : "type" in resolver ? {} : fnOrObj(resolver.params, context) ?? context.params;
}
function getRouteContext(route, url) {
  const routes = Array.isArray(route) ? route : [route];
  for (route of routes) {
    let origin2, path = route;
    if (typeof route == "string")
      try {
        const absolute = new URL(route);
        origin2 = absolute.origin, path = absolute.pathname;
      } catch {
      }
    if (!(origin2 && url.origin !== origin2))
      try {
        const result = match(path, {
          decode: decodeURIComponent
        })(url.pathname);
        if (result) {
          const {
            params,
            path: path2
          } = result;
          return {
            origin: origin2,
            params,
            path: path2
          };
        }
      } catch {
        throw new Error(`"${route}" is not a valid route pattern`);
      }
  }
}
function useMainDocument(props) {
  var _a, _b;
  const $ = (0, import_react_compiler_runtime.c)(22), {
    navigate,
    navigationHistory,
    path,
    targetOrigin,
    resolvers: t0
  } = props;
  let t1;
  $[0] !== t0 ? (t1 = t0 === void 0 ? [] : t0, $[0] = t0, $[1] = t1) : t1 = $[1];
  const resolvers = t1, {
    state: routerState
  } = useRouter(), {
    perspectiveStack
  } = usePerspective();
  let t2;
  $[2] === Symbol.for("react.memo_cache_sentinel") ? (t2 = {
    apiVersion: API_VERSION
  }, $[2] = t2) : t2 = $[2];
  const client = useClient(t2);
  let t3;
  $[3] !== path || $[4] !== routerState ? (t3 = path || ((_b = (_a = routerState._searchParams) == null ? void 0 : _a.find(_temp$6)) == null ? void 0 : _b[1]) || "", $[3] = path, $[4] = routerState, $[5] = t3) : t3 = $[5];
  const relativeUrl = t3, [mainDocumentState, setMainDocumentState] = (0, import_react2.useState)(void 0), mainDocumentIdRef = (0, import_react2.useRef)(void 0);
  let t4;
  $[6] !== navigate || $[7] !== navigationHistory ? (t4 = (doc, url) => {
    var _a2, _b2;
    (!doc || mainDocumentIdRef.current !== doc._id) && (setMainDocumentState({
      document: doc,
      path: url.pathname
    }), mainDocumentIdRef.current = doc == null ? void 0 : doc._id, ((_a2 = navigationHistory.at(-1)) == null ? void 0 : _a2.id) === ((_b2 = navigationHistory.at(-2)) == null ? void 0 : _b2.id) && (navigate == null ? void 0 : navigate({
      id: doc == null ? void 0 : doc._id,
      type: doc == null ? void 0 : doc._type
    })));
  }, $[6] = navigate, $[7] = navigationHistory, $[8] = t4) : t4 = $[8];
  const handleResponse = useEffectEvent(t4);
  let t5;
  $[9] !== client || $[10] !== handleResponse || $[11] !== perspectiveStack || $[12] !== relativeUrl || $[13] !== resolvers || $[14] !== targetOrigin ? (t5 = () => {
    const url_0 = new URL(relativeUrl, targetOrigin);
    if (resolvers.length) {
      let result;
      for (const resolver of resolvers) {
        const context = getRouteContext(resolver.route, url_0);
        if (context) {
          result = {
            context,
            resolver
          };
          break;
        }
      }
      if (result) {
        const query = getQueryFromResult(result.resolver, result.context), params = getParamsFromResult(result.resolver, result.context);
        if (query) {
          const controller = new AbortController(), options = {
            perspective: perspectiveStack,
            signal: controller.signal,
            tag: "use-main-document"
          };
          return client.fetch(query, params, options).then((doc_0) => handleResponse(doc_0, url_0)).catch((e) => {
            e instanceof Error && e.name === "AbortError" || (setMainDocumentState({
              document: void 0,
              path: url_0.pathname
            }), mainDocumentIdRef.current = void 0);
          }), () => {
            controller.abort();
          };
        }
      }
    }
    setMainDocumentState(void 0), mainDocumentIdRef.current = void 0;
  }, $[9] = client, $[10] = handleResponse, $[11] = perspectiveStack, $[12] = relativeUrl, $[13] = resolvers, $[14] = targetOrigin, $[15] = t5) : t5 = $[15];
  let t6;
  return $[16] !== client || $[17] !== perspectiveStack || $[18] !== relativeUrl || $[19] !== resolvers || $[20] !== targetOrigin ? (t6 = [client, perspectiveStack, relativeUrl, resolvers, targetOrigin], $[16] = client, $[17] = perspectiveStack, $[18] = relativeUrl, $[19] = resolvers, $[20] = targetOrigin, $[21] = t6) : t6 = $[21], (0, import_react2.useEffect)(t5, t6), mainDocumentState;
}
function _temp$6(t0) {
  const [key] = t0;
  return key === "preview";
}
var RE_SEGMENT_WITH_INDEX = /^([\w-]+):(0|[1-9][0-9]*)$/;
var RE_SEGMENT_WITH_TUPLE = /^([\w-]+):([0-9]+),([0-9]+)$/;
var RE_SEGMENT_WITH_KEY = /^([\w-]+):([\w-]+)$/;
function urlStringToPath(str) {
  const path = [];
  for (const segment of str.split(".")) {
    const withIndex = RE_SEGMENT_WITH_INDEX.exec(segment);
    if (withIndex) {
      path.push(withIndex[1], Number(withIndex[2]));
      continue;
    }
    const withTuple = RE_SEGMENT_WITH_TUPLE.exec(segment);
    if (withTuple) {
      path.push(withTuple[1], [Number(withTuple[2]), Number(withTuple[3])]);
      continue;
    }
    const withKey = RE_SEGMENT_WITH_KEY.exec(segment);
    if (withKey) {
      path.push(withKey[1], {
        _key: withKey[2]
      });
      continue;
    }
    path.push(segment);
  }
  return path;
}
function parseId(rawId) {
  var _a;
  if (rawId === void 0)
    return;
  const segments = (_a = decodeURIComponent(rawId)) == null ? void 0 : _a.split(".");
  return segments[0] === "drafts" && segments.shift(), segments.join(".");
}
function parsePath(rawPath) {
  if (rawPath !== void 0)
    return studioPath.toString(urlStringToPath(decodeURIComponent(rawPath)));
}
function parseRouterState(state) {
  return {
    id: parseId(state.id),
    path: parsePath(state.path),
    type: state.type
  };
}
function pruneObject(obj) {
  return Object.fromEntries(Object.entries(obj).filter(([, value]) => value !== void 0 && value !== "" && value !== null));
}
function useParams({
  initialPreviewUrl,
  routerNavigate,
  routerState,
  routerSearchParams,
  frameStateRef
}) {
  const params = (0, import_react2.useMemo)(() => {
    const {
      id,
      path,
      type
    } = parseRouterState(routerState);
    return {
      id,
      type,
      path,
      preview: routerSearchParams.preview || initialPreviewUrl.toString(),
      perspective: routerSearchParams.perspective,
      viewport: routerSearchParams.viewport,
      inspect: routerSearchParams.inspect,
      rev: routerSearchParams.rev,
      since: routerSearchParams.since,
      template: routerSearchParams.template,
      templateParams: routerSearchParams.templateParams,
      view: routerSearchParams.view,
      // assist
      pathKey: routerSearchParams.pathKey,
      instruction: routerSearchParams.instruction,
      // comments
      comment: routerSearchParams.comment,
      changesInspectorTab: routerSearchParams.changesInspectorTab
    };
  }, [routerState, routerSearchParams, initialPreviewUrl]), structureParams = (0, import_react2.useMemo)(() => pruneObject({
    inspect: params.inspect,
    path: params.path,
    rev: params.rev,
    since: params.since,
    template: params.template,
    templateParams: params.templateParams,
    view: params.view,
    // assist
    pathKey: params.pathKey,
    instruction: params.instruction,
    // comments
    comment: params.comment,
    changesInspectorTab: params.changesInspectorTab
  }), [params.changesInspectorTab, params.comment, params.inspect, params.instruction, params.path, params.pathKey, params.rev, params.since, params.template, params.templateParams, params.view]), searchParams = (0, import_react2.useMemo)(() => pruneObject({
    perspective: params.perspective,
    preview: params.preview,
    viewport: params.viewport
  }), [params.perspective, params.preview, params.viewport]), routerStateRef = (0, import_react2.useRef)(routerState);
  (0, import_react2.useEffect)(() => {
    routerStateRef.current = routerState;
  }, [routerState]);
  const [navigationHistory, setNavigationHistory] = (0, import_react2.useState)([routerState]);
  return {
    navigate: (0, import_react2.useCallback)((nextState, nextSearchState = {}, forceReplace) => {
      nextState.id && (nextState.id = getPublishedId(nextState.id));
      const {
        _searchParams: routerSearchParams_0,
        ...routerState_0
      } = routerStateRef.current, routerSearchState = (routerSearchParams_0 || []).reduce((acc, [key, value]) => (acc[key] = value, acc), {}), state = pruneObject({
        ...routerState_0,
        ...nextState
      }), searchState = pruneObject({
        ...routerSearchState,
        ...nextSearchState
      });
      routerState_0.id !== state.id && (delete searchState.template, delete searchState.templateParams), state._searchParams = Object.entries(searchState).reduce((acc_0, [key_0, value_0]) => [...acc_0, [key_0, value_0]], []);
      const replace = forceReplace ?? searchState.preview === frameStateRef.current.url;
      setNavigationHistory((prev) => [...prev, state]), routerNavigate(state, {
        replace
      });
    }, [routerNavigate, frameStateRef]),
    navigationHistory,
    params,
    searchParams,
    structureParams
  };
}
var usePopups = (controller) => {
  const $ = (0, import_react_compiler_runtime.c)(10), [popups, setPopups] = (0, import_react2.useState)(_temp$5);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = (url) => {
    const source = window.open(url, "_blank");
    source && setPopups((prev) => new Set(prev).add(source));
  }, $[0] = t0) : t0 = $[0];
  const open = t0;
  let t1, t2;
  $[1] !== controller || $[2] !== popups ? (t1 = () => {
    const unsubs = [];
    if (popups.size && controller)
      for (const source_0 of popups)
        source_0 && "closed" in source_0 && !source_0.closed && unsubs.push(controller.addTarget(source_0));
    return () => {
      unsubs.forEach(_temp2$3);
    };
  }, t2 = [controller, popups], $[1] = controller, $[2] = popups, $[3] = t1, $[4] = t2) : (t1 = $[3], t2 = $[4]), (0, import_react2.useEffect)(t1, t2);
  let t3, t4;
  $[5] !== popups ? (t3 = () => {
    if (popups.size) {
      const interval = setInterval(() => {
        const closed = /* @__PURE__ */ new Set();
        for (const source_1 of popups)
          source_1 && "closed" in source_1 && source_1.closed && closed.add(source_1);
        closed.size && setPopups((prev_0) => {
          const next = new Set(prev_0);
          for (const source_2 of closed)
            next.delete(source_2);
          return next;
        });
      }, POPUP_CHECK_INTERVAL);
      return () => {
        clearInterval(interval);
      };
    }
  }, t4 = [popups], $[5] = popups, $[6] = t3, $[7] = t4) : (t3 = $[6], t4 = $[7]), (0, import_react2.useEffect)(t3, t4);
  let t5;
  return $[8] !== popups ? (t5 = {
    popups,
    open
  }, $[8] = popups, $[9] = t5) : t5 = $[9], t5;
};
function _temp$5() {
  return /* @__PURE__ */ new Set();
}
function _temp2$3(unsub) {
  return unsub();
}
function usePresentationPerspective() {
  const {
    perspectiveStack,
    selectedPerspectiveName: t0,
    selectedReleaseId
  } = usePerspective();
  return selectedReleaseId ? perspectiveStack : t0 === void 0 ? "drafts" : t0;
}
function useStatus() {
  const $ = (0, import_react_compiler_runtime.c)(4);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = /* @__PURE__ */ new Map(), $[0] = t0) : t0 = $[0];
  const [statusMap, setStatusMap] = (0, import_react2.useState)(t0);
  let t1;
  bb0: {
    const values = Array.from(statusMap.values());
    if (values.find(_temp$4)) {
      t1 = "connected";
      break bb0;
    }
    const handshaking = values.filter(_temp2$2);
    if (handshaking.length) {
      t1 = handshaking.some(_temp3$1) ? "connecting" : "reconnecting";
      break bb0;
    }
    t1 = "idle";
  }
  const memoStatus = t1;
  let t2;
  $[1] === Symbol.for("react.memo_cache_sentinel") ? (t2 = (event) => {
    setStatusMap((prev) => {
      var _a;
      const next = new Map(prev);
      if (event.status === "disconnected")
        next.delete(event.connection);
      else {
        const hasConnected_0 = ((_a = next.get(event.connection)) == null ? void 0 : _a.hasConnected) || event.status === "connected", status_1 = event.status === "handshaking" ? "connecting" : event.status;
        next.set(event.connection, {
          status: status_1,
          hasConnected: hasConnected_0
        });
      }
      return next;
    });
  }, $[1] = t2) : t2 = $[1];
  const setStatusFromEvent = t2;
  let t3;
  return $[2] !== memoStatus ? (t3 = [memoStatus, setStatusFromEvent], $[2] = memoStatus, $[3] = t3) : t3 = $[3], t3;
}
function _temp3$1(t0) {
  const {
    hasConnected
  } = t0;
  return !hasConnected;
}
function _temp2$2(t0) {
  const {
    status: status_0
  } = t0;
  return status_0 === "connecting";
}
function _temp$4(t0) {
  const {
    status
  } = t0;
  return status === "connected";
}
var LiveQueries = (0, import_react2.lazy)(() => import("./LiveQueries-LSQKWLPS.js"));
var PostMessageDocuments = (0, import_react2.lazy)(() => import("./PostMessageDocuments-XV3RY7HT.js"));
var PostMessageRefreshMutations = (0, import_react2.lazy)(() => import("./PostMessageRefreshMutations-ELICWUYD.js"));
var PostMessagePerspective = (0, import_react2.lazy)(() => import("./PostMessagePerspective-HW2VOTHK.js"));
var PostMessagePreviewSnapshots = (0, import_react2.lazy)(() => import("./PostMessagePreviewSnapshots-YMDBLI3D.js"));
var PostMessageSchema = (0, import_react2.lazy)(() => import("./PostMessageSchema-23OE4JO2.js"));
var PostMessageTelemetry = (0, import_react2.lazy)(() => import("./PostMessageTelemetry-NUV342C4.js"));
var Container2 = dt(Flex)`
  overflow-x: auto;
`;
function PresentationTool(props) {
  var _a, _b, _c;
  const {
    canToggleSharePreviewAccess,
    canUseSharedPreviewAccess,
    tool,
    vercelProtectionBypass,
    initialPreviewUrl,
    previewUrlRef
  } = props, allowOrigins = useAllowPatterns(previewUrlRef), targetOrigin = useTargetOrigin(previewUrlRef), components = (_a = tool.options) == null ? void 0 : _a.components, name = tool.name || DEFAULT_TOOL_NAME, {
    unstable_navigator,
    unstable_header
  } = components || {}, {
    navigate: routerNavigate,
    state: routerState
  } = useRouter(), routerSearchParams = useUnique(Object.fromEntries(routerState._searchParams || [])), perspective = usePresentationPerspective(), canSharePreviewAccess = useSelector(previewUrlRef, (state) => {
    var _a2;
    return ((_a2 = state.context.previewMode) == null ? void 0 : _a2.shareAccess) !== false;
  }), [devMode] = (0, import_react2.useState)(() => {
    var _a2;
    const option = (_a2 = tool.options) == null ? void 0 : _a2.devMode;
    return typeof option == "function" ? option() : typeof option == "boolean" ? option : typeof window < "u" && window.location.hostname === "localhost";
  }), iframeRef = (0, import_react2.useRef)(null), [controller, setController] = (0, import_react2.useState)(), [visualEditingComlink, setVisualEditingComlink] = (0, import_react2.useState)(null), frameStateRef = (0, import_react2.useRef)({
    title: void 0,
    url: void 0
  }), {
    navigate: _navigate,
    navigationHistory,
    params,
    searchParams,
    structureParams
  } = useParams({
    initialPreviewUrl,
    routerNavigate,
    routerState,
    routerSearchParams,
    frameStateRef
  }), navigate = (0, import_react2.useMemo)(() => debounce(_navigate, 50), [_navigate]), presentationRef = useActorRef(presentationMachine), viewport = (0, import_react2.useMemo)(() => params.viewport ? "mobile" : "desktop", [params.viewport]), [documentsOnPage, setDocumentsOnPage] = useDocumentsOnPage(perspective, frameStateRef), projectId = useProjectId$1(), dataset = useDataset(), mainDocumentState = useMainDocument({
    // Prevent flash of content by using immediate navigation
    navigate: _navigate,
    navigationHistory,
    path: params.preview,
    targetOrigin,
    resolvers: (_c = (_b = tool.options) == null ? void 0 : _b.resolve) == null ? void 0 : _c.mainDocuments
  }), [overlaysConnection, setOverlaysConnection] = useStatus(), [loadersConnection, setLoadersConnection] = useStatus(), [previewKitConnection, setPreviewKitConnection] = useStatus(), {
    open: handleOpenPopup
  } = usePopups(controller), isLoading = useSelector(presentationRef, (state_0) => state_0.matches("loading"));
  (0, import_react2.useEffect)(() => {
    var _a2;
    const target = (_a2 = iframeRef.current) == null ? void 0 : _a2.contentWindow;
    if (!target || isLoading) return;
    const controller_0 = createController({
      targetOrigin
    });
    return controller_0.addTarget(target), setController(controller_0), () => {
      controller_0.destroy(), setController(void 0);
    };
  }, [targetOrigin, isLoading]);
  const handleNavigate = useEffectEvent((nextState, nextSearchState, forceReplace) => navigate(nextState, nextSearchState, forceReplace));
  (0, import_react2.useEffect)(() => {
    if (!controller) return;
    const comlink = controller.createChannel({
      name: "presentation",
      heartbeat: true,
      connectTo: "visual-editing"
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    comlink.on("visual-editing/focus", (data) => {
      "id" in data && handleNavigate({
        type: data.type,
        id: data.id,
        path: data.path
      });
    }), comlink.on("visual-editing/navigate", (data_0) => {
      const {
        title
      } = data_0;
      let url = data_0.url;
      if (!url.startsWith("http"))
        try {
          url = new URL(url, targetOrigin).toString();
        } catch {
        }
      if (frameStateRef.current.url !== url)
        try {
          const [urlWithoutSearch, search] = url.split("?"), searchParams_0 = new URLSearchParams(search);
          searchParams_0.delete(urlSearchParamVercelProtectionBypass), searchParams_0.delete(urlSearchParamVercelSetBypassCookie), handleNavigate({}, {
            preview: `${urlWithoutSearch}${searchParams_0.size > 0 ? "?" : ""}${searchParams_0}`
          });
        } catch {
          handleNavigate({}, {
            preview: url
          });
        }
      frameStateRef.current = {
        title,
        url
      };
    }), comlink.on("visual-editing/meta", (data_1) => {
      frameStateRef.current.title = data_1.title;
    }), comlink.on("visual-editing/toggle", (data_2) => {
      presentationRef.send({
        type: "toggle visual editing overlays",
        enabled: data_2.enabled
      });
    }), comlink.on("visual-editing/documents", (data_3) => {
      setDocumentsOnPage(
        "visual-editing",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data_3.perspective,
        data_3.documents
      );
    }), comlink.on("visual-editing/refreshing", (data_4) => {
      data_4.source === "manual" ? clearTimeout(refreshRef.current) : data_4.source === "mutation" && presentationRef.send({
        type: "iframe refresh"
      });
    }), comlink.on("visual-editing/refreshed", () => {
      presentationRef.send({
        type: "iframe loaded"
      });
    }), comlink.onStatus(setOverlaysConnection);
    const stop = comlink.start();
    return setVisualEditingComlink(comlink), () => {
      stop(), setVisualEditingComlink(null);
    };
  }, [controller, presentationRef, setDocumentsOnPage, setOverlaysConnection, targetOrigin]), (0, import_react2.useEffect)(() => {
    if (!controller) return;
    const comlink_0 = controller.createChannel({
      name: "presentation",
      connectTo: "preview-kit",
      heartbeat: true
    }, createConnectionMachine().provide({
      actors: createCompatibilityActors()
    }));
    return comlink_0.onStatus(setPreviewKitConnection), comlink_0.on("preview-kit/documents", (data_5) => {
      data_5.projectId === projectId && data_5.dataset === dataset && setDocumentsOnPage(
        "preview-kit",
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        data_5.perspective,
        data_5.documents
      );
    }), comlink_0.start();
  }, [controller, dataset, projectId, setDocumentsOnPage, setPreviewKitConnection, targetOrigin]);
  const handleFocusPath = (0, import_react2.useCallback)((nextPath) => {
    navigate({
      path: studioPath.toString(nextPath)
    }, {}, true);
  }, [navigate]), handlePreviewPath = (0, import_react2.useCallback)((nextPath_0) => {
    const url_0 = new URL(nextPath_0, targetOrigin), preview = url_0.toString();
    params.preview !== preview && (Array.isArray(allowOrigins) ? allowOrigins.some((pattern) => pattern.test(preview)) && navigate({}, {
      preview
    }) : url_0.origin === targetOrigin && navigate({}, {
      preview
    }));
  }, [targetOrigin, params.preview, allowOrigins, navigate]), handleStructureParams = (0, import_react2.useCallback)((structureParams_0) => {
    navigate({}, structureParams_0);
  }, [navigate]);
  (0, import_react2.useEffect)(() => {
    params.id && params.path ? visualEditingComlink == null ? void 0 : visualEditingComlink.post("presentation/focus", {
      id: params.id,
      path: params.path
    }) : visualEditingComlink == null ? void 0 : visualEditingComlink.post("presentation/blur");
  }, [params.id, params.path, visualEditingComlink]), (0, import_react2.useEffect)(() => {
    if (frameStateRef.current.url && params.preview && frameStateRef.current.url !== params.preview) {
      try {
        const frameOrigin = new URL(frameStateRef.current.url, targetOrigin).origin, previewOrigin = new URL(params.preview, targetOrigin).origin;
        if (frameOrigin !== previewOrigin)
          return;
      } catch {
      }
      if (frameStateRef.current.url = params.preview, overlaysConnection === "connected") {
        let url_1 = params.preview;
        if (url_1.startsWith("http"))
          try {
            const newUrl = new URL(params.preview, targetOrigin);
            url_1 = newUrl.pathname + newUrl.search + newUrl.hash;
          } catch {
          }
        visualEditingComlink == null ? void 0 : visualEditingComlink.post("presentation/navigate", {
          url: url_1,
          type: "replace"
        });
      }
    }
  }, [overlaysConnection, targetOrigin, params.preview, visualEditingComlink]);
  const toggleOverlay = (0, import_react2.useCallback)(() => visualEditingComlink == null ? void 0 : visualEditingComlink.post("presentation/toggle-overlay"), [visualEditingComlink]), [displayedDocument, setDisplayedDocument] = (0, import_react2.useState)(null);
  (0, import_react2.useEffect)(() => {
    const handleKeyUp = (e) => {
      isAltKey(e) && toggleOverlay();
    }, handleKeydown = (e_0) => {
      isAltKey(e_0) && toggleOverlay(), isHotkey(["mod", "\\"], e_0) && toggleOverlay();
    };
    return window.addEventListener("keydown", handleKeydown), window.addEventListener("keyup", handleKeyUp), () => {
      window.removeEventListener("keydown", handleKeydown), window.removeEventListener("keyup", handleKeyUp);
    };
  }, [toggleOverlay]);
  const [boundaryElement, setBoundaryElement] = (0, import_react2.useState)(null), [{
    navigatorEnabled,
    toggleNavigator
  }, PresentationNavigator] = usePresentationNavigator({
    unstable_navigator
  }), refreshRef = (0, import_react2.useRef)(void 0), handleRefresh = (0, import_react2.useCallback)((fallback) => {
    if (presentationRef.send({
      type: "iframe refresh"
    }), visualEditingComlink) {
      refreshRef.current = window.setTimeout(fallback, 300), visualEditingComlink.post("presentation/refresh", {
        source: "manual",
        livePreviewEnabled: previewKitConnection === "connected" || loadersConnection === "connected"
      });
      return;
    }
    fallback();
  }, [loadersConnection, presentationRef, previewKitConnection, visualEditingComlink]), workspace = useWorkspace(), getCommentIntent = (0, import_react2.useCallback)(({
    id,
    type,
    path
  }) => {
    if (frameStateRef.current.url)
      return {
        title: frameStateRef.current.title || frameStateRef.current.url,
        name: "edit",
        params: {
          id,
          path,
          type,
          inspect: COMMENTS_INSPECTOR_NAME,
          workspace: workspace.name,
          mode: EDIT_INTENT_MODE,
          preview: params.preview
        }
      };
  }, [params.preview, workspace.name]), setViewport = (0, import_react2.useCallback)((next) => {
    navigate({}, {
      viewport: next === "desktop" ? void 0 : "mobile"
    }, true);
  }, [navigate]);
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
    (0, import_jsx_runtime.jsx)(PresentationProvider, { devMode, name, navigate, params, searchParams, structureParams, children: (0, import_jsx_runtime.jsx)(PresentationNavigateProvider, { navigate, children: (0, import_jsx_runtime.jsx)(PresentationParamsProvider, { params, children: (0, import_jsx_runtime.jsx)(SharedStateProvider, { comlink: visualEditingComlink, children: (0, import_jsx_runtime.jsx)(Container2, { "data-testid": "presentation-root", height: "fill", children: (0, import_jsx_runtime.jsxs)(Panels, { children: [
      (0, import_jsx_runtime.jsx)(PresentationNavigator, {}),
      (0, import_jsx_runtime.jsx)(Panel, { id: "preview", minWidth: 325, defaultSize: navigatorEnabled ? 50 : 75, order: 3, children: (0, import_jsx_runtime.jsx)(Flex, { direction: "column", flex: 1, height: "fill", ref: setBoundaryElement, children: (0, import_jsx_runtime.jsx)(BoundaryElementProvider, { element: boundaryElement, children: (0, import_jsx_runtime.jsx)(
        Preview,
        {
          canSharePreviewAccess,
          canToggleSharePreviewAccess,
          canUseSharedPreviewAccess,
          header: unstable_header,
          initialUrl: initialPreviewUrl,
          loadersConnection,
          navigatorEnabled,
          onPathChange: handlePreviewPath,
          onRefresh: handleRefresh,
          openPopup: handleOpenPopup,
          overlaysConnection,
          previewUrl: params.preview,
          perspective,
          ref: iframeRef,
          setViewport,
          targetOrigin,
          toggleNavigator,
          toggleOverlay,
          viewport,
          vercelProtectionBypass,
          presentationRef,
          previewUrlRef
        },
        targetOrigin
      ) }) }) }),
      (0, import_jsx_runtime.jsx)(PresentationContent, { documentId: params.id, documentsOnPage, documentType: params.type, getCommentIntent, mainDocumentState, onFocusPath: handleFocusPath, onStructureParams: handleStructureParams, searchParams, setDisplayedDocument, structureParams })
    ] }) }) }) }) }) }),
    (0, import_jsx_runtime.jsxs)(import_react2.Suspense, { children: [
      controller && (0, import_jsx_runtime.jsx)(LiveQueries, { controller, perspective, liveDocument: displayedDocument, onDocumentsOnPage: setDocumentsOnPage, onLoadersConnection: setLoadersConnection }),
      visualEditingComlink && params.id && params.type && (0, import_jsx_runtime.jsx)(PostMessageRefreshMutations, { comlink: visualEditingComlink, id: params.id, type: params.type, loadersConnection, previewKitConnection }),
      visualEditingComlink && (0, import_jsx_runtime.jsx)(PostMessageSchema, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && documentsOnPage.length > 0 && (0, import_jsx_runtime.jsx)(PostMessagePreviewSnapshots, { comlink: visualEditingComlink, perspective, refs: documentsOnPage }),
      visualEditingComlink && (0, import_jsx_runtime.jsx)(PostMessageDocuments, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && (0, import_jsx_runtime.jsx)(PostMessageFeatures$1, { comlink: visualEditingComlink }),
      visualEditingComlink && (0, import_jsx_runtime.jsx)(PostMessagePerspective, { comlink: visualEditingComlink, perspective }),
      visualEditingComlink && (0, import_jsx_runtime.jsx)(PostMessageTelemetry, { comlink: visualEditingComlink })
    ] })
  ] });
}
function isAltKey(event) {
  return event.key === "Alt";
}
var IS_MAC = typeof window < "u" && /Mac|iPod|iPhone|iPad/.test(window.navigator.platform);
var MODIFIERS = {
  alt: "altKey",
  ctrl: "ctrlKey",
  mod: IS_MAC ? "metaKey" : "ctrlKey",
  shift: "shiftKey"
};
function isHotkey(keys, event) {
  return keys.every((key) => MODIFIERS[key] ? event[MODIFIERS[key]] : event.key === key.toUpperCase());
}
function defineCreatePreviewSecretActor({
  client,
  currentUserId
}) {
  return fromPromise(async () => await createPreviewSecret(client, "sanity/presentation", location.href, currentUserId));
}
function defineReadSharedSecretActor({
  client
}) {
  return fromPromise(async () => client.fetch(fetchSharedAccessQuery, {}, {
    tag: "presentation.fallback-to-shared-access-secret"
  }));
}
function defineResolveAllowPatternsActor({
  client,
  allowOption
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      initialUrl
    } = input;
    if (typeof URLPattern > "u" && await import("./urlpattern-polyfill-23LLWJMC.js"), !allowOption)
      return [new URLPattern(initialUrl.origin)];
    const maybePatterns = typeof allowOption == "function" ? await allowOption({
      client,
      origin,
      initialUrl
    }) : allowOption, urlPatterns = (Array.isArray(maybePatterns) ? maybePatterns : [maybePatterns]).map((value) => {
      const urlPattern = new URLPattern(value);
      if (urlPattern.hostname === "*")
        throw new Error("It's insecure to allow any hostname, it could disclose data to a malicious site");
      return urlPattern;
    });
    return urlPatterns.some((pattern) => pattern.test(initialUrl.origin)) ? urlPatterns : [...urlPatterns, new URLPattern(initialUrl.origin)];
  });
}
function defineResolveInitialUrlActor({
  client,
  studioBasePath,
  previewUrlOption,
  perspective
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      origin: origin2
    } = location;
    if (typeof previewUrlOption == "function") {
      const initial = await previewUrlOption({
        client,
        studioBasePath,
        // @TODO handle checking permissions here, and then generating a secret
        previewUrlSecret: "",
        studioPreviewPerspective: encodeStudioPerspective(perspective),
        previewSearchParam: input.previewSearchParam
      });
      return new URL(initial, origin2);
    }
    if (!previewUrlOption)
      return new URL("/", origin2);
    if (typeof previewUrlOption == "string")
      return new URL(previewUrlOption, origin2);
    if (typeof previewUrlOption.initial == "function") {
      const initial = await previewUrlOption.initial({
        client,
        origin: origin2
      });
      return new URL(initial, origin2);
    }
    return typeof previewUrlOption.initial == "string" ? new URL(previewUrlOption.initial, origin2) : new URL(previewUrlOption.preview || "/", previewUrlOption.origin || origin2);
  });
}
function defineResolvePreviewModeActor({
  client,
  previewUrlOption
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      targetOrigin
    } = input;
    if (typeof previewUrlOption == "object" && (previewUrlOption == null ? void 0 : previewUrlOption.draftMode))
      return {
        enable: previewUrlOption.draftMode.enable,
        shareAccess: previewUrlOption.draftMode.shareAccess ?? true
      };
    if (!previewUrlOption || typeof previewUrlOption == "string" || typeof previewUrlOption == "function" || !previewUrlOption.previewMode)
      return false;
    const previewMode = typeof previewUrlOption.previewMode == "function" ? await previewUrlOption.previewMode({
      client,
      origin,
      targetOrigin
    }) : previewUrlOption.previewMode;
    return previewMode === false ? false : {
      enable: previewMode.enable,
      shareAccess: previewMode.shareAccess ?? true
    };
  });
}
function defineResolvePreviewModeUrlActor({
  client,
  studioBasePath,
  previewUrlOption,
  perspective
}) {
  return fromPromise(async ({
    input
  }) => {
    const {
      previewUrlSecret,
      resolvedPreviewMode,
      initialUrl
    } = input;
    if (typeof previewUrlOption == "function") {
      const initial = await previewUrlOption({
        client,
        studioBasePath,
        previewUrlSecret,
        studioPreviewPerspective: encodeStudioPerspective(perspective),
        previewSearchParam: initialUrl.toString()
      });
      return new URL(initial, initialUrl);
    }
    if (!resolvedPreviewMode)
      throw new Error("Resolved preview mode is false");
    const url = new URL(resolvedPreviewMode.enable, initialUrl);
    return url.searchParams.set(urlSearchParamPreviewSecret, previewUrlSecret), url.searchParams.set(urlSearchParamPreviewPerspective, encodeStudioPerspective(perspective)), initialUrl.pathname !== url.pathname && url.searchParams.set(urlSearchParamPreviewPathname, `${initialUrl.pathname}${initialUrl.search}${initialUrl.hash}`), url;
  });
}
var resolveUrlFromPreviewSearchParamActor = fromPromise(async ({
  input
}) => {
  const {
    previewSearchParam,
    initialUrl,
    allowOrigins
  } = input;
  if (!previewSearchParam)
    return initialUrl;
  try {
    const previewSearchParamUrl = new URL(previewSearchParam, initialUrl.origin);
    return allowOrigins.some((pattern) => pattern.test(previewSearchParamUrl.origin)) ? previewSearchParamUrl : initialUrl;
  } catch {
    return initialUrl;
  }
});
var shareAccessSingletonDocument = {
  _id: schemaIdSingleton,
  _type: schemaTypeSingleton
};
var previewUrlSecretDocument = {
  _id: `drafts.${v4_default()}`,
  _type: schemaType
};
var previewUrlMachine = setup({
  types: {},
  actions: {
    "notify preview will likely fail": log("Missing permissions to create preview secret, or read shared preview secret. Preview will likely fail loading."),
    "assign preview search param": assign({
      previewSearchParam: (_, params) => params.previewSearchParam
    }),
    "assign error": assign({
      error: (_, params) => params.error instanceof Error ? params.error : new Error(params.message, {
        cause: params.error
      })
    })
  },
  actors: {
    "check permission": fromObservable(() => throwError(() => new Error("The 'check permission' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'check permission': fromObservable(({input}: {input: CheckPermissionInput}) => ...)}})"))),
    "resolve initial url": fromPromise(() => Promise.reject(new Error("The 'resolve initial url' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve initial url': fromPromise(...)}})"))),
    "resolve allow patterns": fromPromise(() => Promise.reject(new Error("The 'resolve allow patterns' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve allow pattern': fromPromise(...)}})"))),
    "resolve url from preview search param": resolveUrlFromPreviewSearchParamActor,
    "resolve preview mode": fromPromise(() => Promise.reject(new Error("The 'resolve preview mode' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve preview mode': fromPromise(...)}})"))),
    "create preview secret": fromPromise(async () => Promise.reject(new Error("The 'create preview secret' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'create preview secret': fromPromise(...)}})"))),
    "read shared preview secret": fromPromise(async () => Promise.reject(new Error("The 'read shared preview secret' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'read shared preview secret': fromPromise(...)}})"))),
    "resolve preview mode url": fromPromise(() => Promise.reject(new Error("The 'resolve preview mode url' actor is not implemented. Add it to previewUrlMachine.provide({actors: {'resolve preview mode url': fromPromise(...)}})")))
  },
  guards: {
    "has checked permissions": ({
      context
    }) => !!(context.previewAccessSharingCreatePermission && context.previewAccessSharingReadPermission && context.previewAccessSharingUpdatePermission && context.previewUrlSecretPermission),
    "search param has new origin": ({
      context,
      event
    }) => {
      if (!context.previewUrl || !event.previewSearchParam)
        return false;
      try {
        const previewSearchParamUrl = new URL(event.previewSearchParam, context.previewUrl);
        return context.previewUrl.origin !== previewSearchParamUrl.origin;
      } catch {
        return false;
      }
    },
    "can create preview secret": ({
      context
    }) => {
      var _a;
      return ((_a = context.previewUrlSecretPermission) == null ? void 0 : _a.granted) === true;
    },
    "has preview mode with created secret": ({
      context
    }, params) => {
      var _a;
      return params === false ? false : ((_a = context.previewUrlSecretPermission) == null ? void 0 : _a.granted) === true;
    },
    "has preview mode with share access": ({
      context
    }, params) => {
      var _a;
      return params === false ? false : ((_a = context.previewAccessSharingReadPermission) == null ? void 0 : _a.granted) === true;
    },
    "has preview mode without permissions": ({
      context
    }, params) => {
      var _a, _b;
      return params === false ? false : ((_a = context.previewAccessSharingReadPermission) == null ? void 0 : _a.granted) === false && ((_b = context.previewUrlSecretPermission) == null ? void 0 : _b.granted) === false;
    }
  },
  delays: {
    expiredSecret: ({
      context
    }) => {
      var _a;
      if (!((_a = context.previewUrlSecret) == null ? void 0 : _a.expiresAt))
        return 0;
      const now = Date.now(), expiresAt = context.previewUrlSecret.expiresAt.getTime();
      return Math.max(expiresAt - now, 0);
    }
  }
}).createMachine({
  // eslint-disable-next-line tsdoc/syntax
  /** @xstate-layout N4IgpgJg5mDOIC5QAUBOYBuBLMB3ABAKoBKAMgMRiqoD2qAdAA4A2AhgC4BmdAtvWphwESpBFgB2GGgGMOWGuIDaABgC6K1YlCMasLO3nitIAB6IArAA56AZgCcAdkcBGS8vMAmO+YBszgDQgAJ6Izs4+9M7KACzKztGWHg4OPubmAL7pgQLYeERklNR0TGxcvPzoucJkYpIycgqKzupqxjp6BgrGZggAtM520ZHRdjZjNjFe7oEhCGERUbHxicmpGVkgOUL5FFS0DCwc3Kh8W3kitVKynUoeLZpIIO36ht2IvV62Hl7elmE2lh83xmoXCkRicQSSRS5gSmWylW2IkK+xKR3KZ2qogkVwaShs9zauheXUePV6gPo3jSUyi-xBczBi0hKxh5mc8M2iPOBVgYHY+EY3IIfNYqGkAAtBWLWDwNESOq8yaCbM56A4bB5fGllHYvD4fAz4h56CNfG5LKqHMpLdFOZidvRJWBpABrCRQZBUHhYWB6BSwcjyx7PG5vPrs5TqjWqyyjTXRDwMjwxei68J2ZQ2nyWXN2jYOkT0dCwGjMbDiKAASXEL1YzEIqGY5AgCjA9BxNFd7cLZGLcDLFertYM9cbzEu9RuGmD2mJYeVfRGdipyh86Yc0XiE3MDK3JssIwcrmtPjGSXzCMEPNI-dL5Y9NbrDabKOKhzKJwq16xd8Hj5HLAxybSdrkMGdWhDeclVAclN3odlzBsKwBjSSxjwcZM7DVeJ1w8P4xmidk7HtYVHRLf9KwAQWYZgaFwZAOHYKhxEDVtxHbTtu2-KpyIHB9qNo+jGPYZjUFY0C8Qgh450VUlYPedkHHoHwnDSZDVOiGwfGiBlUhXXwwjsQYtKSYzSJ-Pj7yHGi6IYpiWMDPZ31KY5TjIosKIEqBbOEhzxNgSTpzUWcnmg+TTHePV6Hw3MYgzaItJ0hlYRNTNkLiHxBl1GILN4zz+KHccADFaB4TEAGUwDFSVGNQWUWzbDs6m43tby8oqm1KmhyuFKqaolOrZSC8CQsg2SSSMRdel8ZSNUTdlcw8M07AZQZrDXdaDRtUZnHWK98r7DqPRKsrKuq8VBplHg3wOVyMQ8o7CpOrqzr6i7auukbGjGmSwrkqaFL6MJlLiWFlC1EGty0hknAiXVVPMRx12UJwOQLR72ueytMQAWRoCAwEajjmqkVrMb-by8YJsBvqUX6FUm8Nem2+hbWPUZErGTcjS8NUJg8AE9T1ZwHHwvKkSe6yPWpwnic4lqewp46ceFfHCbpmdmkZhcgZmyxzFsDmTPcXUUiNRKDy3ZQJlVLSkYlm9KaHWWifYhWyaVyyCul1Wf3V2nOzAn71DuHWYMivovGsBxPCy74beWaJDWCUJzBSFTrUcQYdMzIFHd-FXPTVmn5dJrsvcOrHfeL-2ac1kKCXDiLyWcNKJiiHM-BtONwgtnMEM1DVNwhhI7B8AurMo2uqgD260U-dzval6fXYbwkoIB5moijLLkm5tvYRBo1nGQtND11ZaIdzEiMeX6vV5LuW+QFIVLNFS7pXquVxv+pnF1FtYP4OY7AG3QohJMqcEDeGUq4NwYQBhLEnkWWAABXaQ0g4CBhfoKMiH9JRf1lKFUMEceiizVPA0+7gtQQy8LzXU6obaJTFtEJwHhXDIL7G-WepccHcO2PgqUjBrrEPCoDSOFI3C2AGHtQ8sIiJJGTILZS7JRaeGSKw7CnDbz8LwAHJ06AOBgHOtIdA7Ay5cUrpLHRT92ymOqsxExZj16iK3gAqI6oaQ6QtE4YylhkynzmkCBGNgNR7VvgdaxTBbEGIccY969jzHOTuuiL8bVol10JrEoxTj+QuN-iQlu7xwjKX1P8bSTC0hGhcKaBIOZAQGkBKE7RGSeFZMMRACqEoxRgCohgrBFjFY8Sibo3A+iOldJ6X0zBfp8l-UKeIshjgqTGTiPYPaGotS7igd8QWtgsp6iQnFOEd8q6tKEOM6qnTunoGmQM5JC83LDKdqMy5rBrlTP6bMoOUkGab3-kDU+ERVEpnsEjDRVSdljBXKeQY3h5gOBaa8mmzt4k-nHIMz2zzfzIvaYVNFVRxxzObosxAfg1Q2jSOERIh5kIBNGKaNZ2lvjhFhEimJHUCVCAxQ8j8Tz0m4vbJyzERKfnBQ3hNXWkdyWeJsCMVhqNsK6mTO4Q2Q9DysLCEhDw7LMntjQV8wMJhYDsCMfQVgnAxIAAowAmEYFgdAnSXRmIAJTkAFTEg1MzYCuIBZHKYKlUiqWwrCMJkDZgDAYceRMfwUisPYZYTIGxxA03gI8NqJLmZ6msKqENcjErqIZL0cethvDGXLew9hiYWnOjdDLb0vp-SsUzdNcwEMEJ7WTohDMfgU4RpTCpUJnhYrHghuEFpRcnyjhfMwFtet2Q2FNOwsWZarBan8TsuMkRvhIzPJGDwmkWnJLnf6g0aZl0mQTURDdsxYiGwwsRIEgwEwTuxj5IS9lRKORPeSJCOF4XgrUZqbZsxwZszcJtbC4RUg2FfTXU6PVzoDSGjwH9ik-gxRGG4NtxkkZblhgyxIhFQG5lSPEODj89VoYjKqGKURkij0zImXSUCwiozZuDLUCQQY6tOVEr1WDqMsxNCkP4RFPBZj+I4I0qoRMODjIlceBzkK6raWAIT7DDZlNPhUuVkKI0pEXbHBISF1yAiIqpi5KL7E5ISWYoTna2b6Qg+DcFN7EAphLdpdOWVoPJ0RXxl5HKrmTNuYahzaQviaQPVERa8mlGeBUnnQyDStSwcCzi4L1kuV4HHNR4DCFdRaVVFSzcZ4VVIVsDEVhZ5QnWlYZZvRKLj3-KlT0FIKjVRZghkCXwqkjQGzVFxvOMisoWYy46QV9ABN+mo3mFZZ427lp032jzVa2bJGtCUtciak1AA */
  id: "Preview URL",
  context: ({
    input
  }) => ({
    initialUrl: null,
    previewUrl: null,
    error: null,
    allowOrigins: null,
    previewSearchParam: input.previewSearchParam,
    previewUrlSecret: null,
    previewAccessSharingCreatePermission: null,
    previewAccessSharingReadPermission: null,
    previewAccessSharingUpdatePermission: null,
    previewUrlSecretPermission: null,
    previewMode: null
  }),
  invoke: [{
    src: "check permission",
    input: () => ({
      checkPermissionName: "read",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingReadPermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "create",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingCreatePermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "update",
      document: shareAccessSingletonDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewAccessSharingUpdatePermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }, {
    src: "check permission",
    input: () => ({
      checkPermissionName: "create",
      document: previewUrlSecretDocument
    }),
    onError: {
      target: ".error",
      actions: {
        type: "assign error",
        params: ({
          event
        }) => ({
          message: "Failed to check permission",
          error: event.error
        })
      }
    },
    onSnapshot: {
      actions: assign({
        previewUrlSecretPermission: ({
          event
        }) => event.snapshot.context ?? null
      })
    }
  }],
  on: {
    "set preview search param": {
      actions: {
        type: "assign preview search param",
        params: ({
          event
        }) => ({
          previewSearchParam: event.previewSearchParam
        })
      }
    }
  },
  states: {
    checkingPermissions: {
      always: {
        guard: "has checked permissions",
        target: "resolvingInitialUrl"
      },
      tags: "busy"
    },
    resolvingInitialUrl: {
      invoke: {
        src: "resolve initial url",
        input: ({
          context
        }) => ({
          previewSearchParam: context.previewSearchParam
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve initial url",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingAllowPatterns",
          actions: assign({
            initialUrl: ({
              event
            }) => event.output
          })
        }
      },
      tags: "busy"
    },
    error: {
      type: "final",
      tags: "error"
    },
    resolvingAllowPatterns: {
      invoke: {
        src: "resolve allow patterns",
        input: ({
          context
        }) => ({
          initialUrl: context.initialUrl
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url allow patterns",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingUrlFromPreviewSearchParam",
          actions: assign({
            allowOrigins: ({
              event
            }) => event.output
          })
        }
      },
      tags: ["busy"]
    },
    resolvingUrlFromPreviewSearchParam: {
      id: "loop",
      invoke: {
        src: "resolve url from preview search param",
        input: ({
          context
        }) => ({
          initialUrl: context.initialUrl,
          allowOrigins: context.allowOrigins,
          previewSearchParam: context.previewSearchParam
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url from search param",
              error: event.error
            })
          }
        },
        onDone: {
          target: "resolvingPreviewMode",
          actions: assign({
            initialUrl: ({
              event
            }) => event.output
          })
        }
      },
      tags: ["busy"]
    },
    resolvingPreviewMode: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: true
        }
      },
      invoke: {
        src: "resolve preview mode",
        input: ({
          context
        }) => ({
          targetOrigin: context.initialUrl.origin
        }),
        onError: {
          target: "error",
          actions: {
            type: "assign error",
            params: ({
              event
            }) => ({
              message: "Failed to resolve preview url allow patterns",
              error: event.error
            })
          }
        },
        onDone: [{
          guard: {
            type: "has preview mode with created secret",
            params: ({
              event
            }) => event.output
          },
          actions: assign({
            previewMode: ({
              event
            }) => event.output
          }),
          target: "previewMode.createPreviewSecret"
        }, {
          guard: {
            type: "has preview mode with share access",
            params: ({
              event
            }) => event.output
          },
          actions: assign({
            previewMode: ({
              event
            }) => event.output
          }),
          target: "previewMode.readShareAccess"
        }, {
          guard: {
            type: "has preview mode without permissions",
            params: ({
              event
            }) => event.output
          },
          actions: [assign({
            previewUrl: ({
              context
            }) => context.initialUrl
          }), "notify preview will likely fail"],
          target: "success"
        }, {
          actions: assign({
            previewUrl: ({
              context
            }) => context.initialUrl
          }),
          target: "success"
        }]
      },
      tags: ["busy"]
    },
    success: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: true
        }
      }
    },
    previewMode: {
      on: {
        "set preview search param": {
          guard: "search param has new origin",
          actions: {
            type: "assign preview search param",
            params: ({
              event
            }) => ({
              previewSearchParam: event.previewSearchParam
            })
          },
          target: "#loop",
          reenter: true
        }
      },
      states: {
        createPreviewSecret: {
          invoke: {
            src: "create preview secret",
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to create preview secret",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "resolvePreviewUrl",
              actions: assign({
                previewUrlSecret: ({
                  event
                }) => event.output
              })
            }
          },
          tags: ["busy"]
        },
        readShareAccess: {
          invoke: {
            src: "read shared preview secret",
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to read shared preview secret",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "resolvePreviewUrl",
              actions: assign({
                previewUrlSecret: ({
                  event
                }) => ({
                  secret: event.output,
                  expiresAt: new Date(Date.now() + 1e3 * 60 * 60 * 60 * 24)
                })
              })
            }
          },
          tags: ["busy"]
        },
        resolvePreviewUrl: {
          invoke: {
            src: "resolve preview mode url",
            input: ({
              context
            }) => ({
              initialUrl: context.initialUrl,
              resolvedPreviewMode: context.previewMode,
              previewUrlSecret: context.previewUrlSecret.secret
            }),
            onError: {
              target: "error",
              actions: {
                type: "assign error",
                params: ({
                  event
                }) => ({
                  message: "Failed to resolve preview url",
                  error: event.error
                })
              }
            },
            onDone: {
              target: "success",
              actions: assign({
                previewUrl: ({
                  event
                }) => event.output
              })
            }
          },
          tags: ["busy"]
        },
        error: {
          type: "final",
          tags: ["error"]
        },
        success: {
          after: {
            expiredSecret: {
              guard: "can create preview secret",
              actions: assign({
                previewUrlSecret: null
              }),
              target: "createPreviewSecret",
              reenter: true
            }
          }
        }
      },
      initial: "readShareAccess"
    }
  },
  initial: "checkingPermissions"
});
function usePreviewUrlActorRef(previewUrlOption, allowOption) {
  var _a, _b, _c;
  const $ = (0, import_react_compiler_runtime.c)(24), grantsStore = useGrantsStore();
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: API_VERSION
  }, $[0] = t0) : t0 = $[0];
  const client = useClient(t0), currentUserId = (_a = useCurrentUser()) == null ? void 0 : _a.id, studioBasePath = ((_c = (_b = useActiveWorkspace()) == null ? void 0 : _b.activeWorkspace) == null ? void 0 : _c.basePath) || "/", router = useRouter();
  let t1;
  $[1] !== router.state._searchParams ? (t1 = new URLSearchParams(router.state._searchParams).get("preview"), $[1] = router.state._searchParams, $[2] = t1) : t1 = $[2];
  const previewSearchParam = t1, {
    push: pushToast
  } = useToast(), {
    t
  } = useTranslation(presentationLocaleNamespace), perspective = usePresentationPerspective();
  let t2;
  if ($[3] !== allowOption || $[4] !== client || $[5] !== currentUserId || $[6] !== grantsStore || $[7] !== perspective || $[8] !== previewUrlOption || $[9] !== pushToast || $[10] !== studioBasePath || $[11] !== t) {
    let t32;
    $[13] !== pushToast || $[14] !== t ? (t32 = () => pushToast({
      id: "preview-url-secret.missing-grants",
      closable: true,
      status: "error",
      duration: 1 / 0,
      title: t("preview-url-secret.missing-grants")
    }), $[13] = pushToast, $[14] = t, $[15] = t32) : t32 = $[15];
    let t42;
    $[16] !== grantsStore ? (t42 = (t52) => {
      const {
        input
      } = t52;
      return grantsStore.checkDocumentPermission(input.checkPermissionName, input.document);
    }, $[16] = grantsStore, $[17] = t42) : t42 = $[17], t2 = previewUrlMachine.provide({
      actions: {
        "notify preview will likely fail": t32
      },
      actors: {
        "create preview secret": defineCreatePreviewSecretActor({
          client,
          currentUserId
        }),
        "read shared preview secret": defineReadSharedSecretActor({
          client
        }),
        "resolve allow patterns": defineResolveAllowPatternsActor({
          client,
          allowOption
        }),
        "resolve initial url": defineResolveInitialUrlActor({
          client,
          studioBasePath,
          previewUrlOption,
          perspective
        }),
        "resolve preview mode": defineResolvePreviewModeActor({
          client,
          previewUrlOption
        }),
        "resolve preview mode url": defineResolvePreviewModeUrlActor({
          client,
          studioBasePath,
          previewUrlOption,
          perspective
        }),
        "check permission": fromObservable(t42)
      }
    }), $[3] = allowOption, $[4] = client, $[5] = currentUserId, $[6] = grantsStore, $[7] = perspective, $[8] = previewUrlOption, $[9] = pushToast, $[10] = studioBasePath, $[11] = t, $[12] = t2;
  } else
    t2 = $[12];
  let t3;
  $[18] !== previewSearchParam ? (t3 = {
    input: {
      previewSearchParam
    }
  }, $[18] = previewSearchParam, $[19] = t3) : t3 = $[19];
  const actorRef = useActorRef(t2, t3);
  let t4, t5;
  $[20] !== actorRef || $[21] !== previewSearchParam ? (t4 = () => {
    actorRef.send({
      type: "set preview search param",
      previewSearchParam
    });
  }, t5 = [actorRef, previewSearchParam], $[20] = actorRef, $[21] = previewSearchParam, $[22] = t4, $[23] = t5) : (t4 = $[22], t5 = $[23]), (0, import_react2.useEffect)(t4, t5);
  const error = useSelector(actorRef, _temp$3);
  if (error)
    throw error;
  return actorRef;
}
function _temp$3(state) {
  return state.status === "error" ? state.error : state.hasTag("error") ? state.context.error : null;
}
function useReportInvalidPreviewSearchParam(previewUrlRef) {
  const $ = (0, import_react_compiler_runtime.c)(9), {
    t
  } = useTranslation(presentationLocaleNamespace), {
    push: pushToast
  } = useToast(), router = useRouter();
  let t0;
  $[0] !== router.state._searchParams ? (t0 = new URLSearchParams(router.state._searchParams).get("preview"), $[0] = router.state._searchParams, $[1] = t0) : t0 = $[1];
  const previewSearchParam = t0, allowOrigins = useSelector(previewUrlRef, _temp$2), currentOrigin = useSelector(previewUrlRef, _temp2$1);
  let t1, t2;
  $[2] !== allowOrigins || $[3] !== currentOrigin || $[4] !== previewSearchParam || $[5] !== pushToast || $[6] !== t ? (t1 = () => {
    if (!Array.isArray(allowOrigins) || !previewSearchParam || !currentOrigin)
      return;
    const nextOrigin = new URL(previewSearchParam, currentOrigin).origin;
    allowOrigins.some((pattern) => pattern.test(nextOrigin)) || pushToast({
      closable: true,
      id: `presentation-iframe-origin-mismatch-${nextOrigin}`,
      status: "error",
      duration: 1 / 0,
      title: t("preview-search-param.configuration.error.title"),
      description: (0, import_jsx_runtime.jsx)(Translate, { t, i18nKey: "preview-search-param.configuration.error.description", components: {
        Code: "code"
      }, values: {
        previewSearchParam,
        blockedOrigin: nextOrigin
      } })
    });
  }, t2 = [allowOrigins, currentOrigin, previewSearchParam, pushToast, t], $[2] = allowOrigins, $[3] = currentOrigin, $[4] = previewSearchParam, $[5] = pushToast, $[6] = t, $[7] = t1, $[8] = t2) : (t1 = $[7], t2 = $[8]), (0, import_react2.useEffect)(t1, t2);
}
function _temp2$1(state_0) {
  var _a;
  return (_a = state_0.context.previewUrl) == null ? void 0 : _a.origin;
}
function _temp$2(state) {
  return state.context.allowOrigins;
}
function useVercelBypassSecret() {
  const $ = (0, import_react_compiler_runtime.c)(7);
  let t0;
  $[0] === Symbol.for("react.memo_cache_sentinel") ? (t0 = {
    apiVersion: API_VERSION
  }, $[0] = t0) : t0 = $[0];
  const client = useClient(t0), [vercelProtectionBypassReadyState, ready] = (0, import_react2.useReducer)(_temp$1, "loading"), [vercelProtectionBypassSecret, setVercelProtectionBypassSecret] = (0, import_react2.useState)(null);
  let t1, t2;
  $[1] !== client ? (t1 = () => {
    const unsubscribe = subcribeToVercelProtectionBypass(client, (secret) => {
      setVercelProtectionBypassSecret(secret), ready();
    });
    return () => unsubscribe();
  }, t2 = [client], $[1] = client, $[2] = t1, $[3] = t2) : (t1 = $[2], t2 = $[3]), (0, import_react2.useEffect)(t1, t2);
  let t3;
  return $[4] !== vercelProtectionBypassReadyState || $[5] !== vercelProtectionBypassSecret ? (t3 = [vercelProtectionBypassSecret, vercelProtectionBypassReadyState], $[4] = vercelProtectionBypassReadyState, $[5] = vercelProtectionBypassSecret, $[6] = t3) : t3 = $[6], t3;
}
function _temp$1() {
  return "ready";
}
function PresentationToolGrantsCheck(t0) {
  var _a, _b;
  const $ = (0, import_react_compiler_runtime.c)(8), {
    tool
  } = t0, previewUrlRef = usePreviewUrlActorRef((_a = tool.options) == null ? void 0 : _a.previewUrl, (_b = tool.options) == null ? void 0 : _b.allowOrigins);
  useReportInvalidPreviewSearchParam(previewUrlRef);
  const previewAccessSharingCreatePermission = useSelector(previewUrlRef, _temp), previewAccessSharingUpdatePermission = useSelector(previewUrlRef, _temp2), previewAccessSharingReadPermission = useSelector(previewUrlRef, _temp3), previewUrlSecretPermission = useSelector(previewUrlRef, _temp4), url = useSelector(previewUrlRef, _temp5), [vercelProtectionBypass, vercelProtectionBypassReadyState] = useVercelBypassSecret();
  if (!url || vercelProtectionBypassReadyState === "loading" || !previewAccessSharingCreatePermission || typeof previewAccessSharingCreatePermission.granted > "u" || !previewAccessSharingUpdatePermission || typeof previewAccessSharingUpdatePermission.granted > "u" || !previewUrlSecretPermission || !previewAccessSharingReadPermission || typeof previewAccessSharingReadPermission.granted > "u" || typeof previewUrlSecretPermission.granted > "u") {
    let t12;
    return $[0] === Symbol.for("react.memo_cache_sentinel") ? (t12 = (0, import_jsx_runtime.jsx)(PresentationSpinner, {}), $[0] = t12) : t12 = $[0], t12;
  }
  const t1 = (previewAccessSharingCreatePermission == null ? void 0 : previewAccessSharingCreatePermission.granted) === true && (previewAccessSharingUpdatePermission == null ? void 0 : previewAccessSharingUpdatePermission.granted) === true, t2 = (previewAccessSharingReadPermission == null ? void 0 : previewAccessSharingReadPermission.granted) === true;
  let t3;
  return $[1] !== previewUrlRef || $[2] !== t1 || $[3] !== t2 || $[4] !== tool || $[5] !== url || $[6] !== vercelProtectionBypass ? (t3 = (0, import_jsx_runtime.jsx)(PresentationTool, { tool, initialPreviewUrl: url, vercelProtectionBypass, canToggleSharePreviewAccess: t1, canUseSharedPreviewAccess: t2, previewUrlRef }), $[1] = previewUrlRef, $[2] = t1, $[3] = t2, $[4] = tool, $[5] = url, $[6] = vercelProtectionBypass, $[7] = t3) : t3 = $[7], t3;
}
function _temp5(state_3) {
  return state_3.context.previewUrl;
}
function _temp4(state_2) {
  return state_2.context.previewUrlSecretPermission;
}
function _temp3(state_1) {
  return state_1.context.previewAccessSharingReadPermission;
}
function _temp2(state_0) {
  return state_0.context.previewAccessSharingUpdatePermission;
}
function _temp(state) {
  return state.context.previewAccessSharingCreatePermission;
}
export {
  PresentationToolGrantsCheck as default
};
//# sourceMappingURL=PresentationToolGrantsCheck-6QEDNC2H.js.map
