{
  "version": 3,
  "sources": ["../../../sanity/src/presentation/overlays/PostMessageDocuments.tsx"],
  "sourcesContent": ["import {\n  type ClientPerspective,\n  type MutationEvent,\n  type ReconnectEvent,\n  type WelcomeEvent,\n} from '@sanity/client'\nimport {type FunctionComponent, memo, useEffect} from 'react'\nimport {filter, first, merge, shareReplay} from 'rxjs'\nimport {isReleasePerspective, RELEASES_STUDIO_CLIENT_OPTIONS, useClient} from 'sanity'\n\nimport {API_VERSION} from '../constants'\nimport {type VisualEditingConnection} from '../types'\n\ninterface PostMessageDocumentsProps {\n  comlink: VisualEditingConnection\n  perspective: ClientPerspective\n}\n\nconst PostMessageDocuments: FunctionComponent<PostMessageDocumentsProps> = (props) => {\n  const {comlink, perspective} = props\n\n  const client = useClient(\n    isReleasePerspective(perspective) ? RELEASES_STUDIO_CLIENT_OPTIONS : {apiVersion: API_VERSION},\n  )\n\n  useEffect(() => {\n    const listener = client\n      .listen(\n        '*[!(_id in path(\"_.**\"))]',\n        {},\n        {\n          effectFormat: 'mendoza',\n          events: ['welcome', 'mutation', 'reconnect'],\n          includePreviousRevision: false,\n          includeResult: false,\n          includeAllVersions: true,\n          tag: 'presentation-documents',\n          visibility: 'transaction',\n        },\n      )\n      .pipe(\n        filter(\n          (event): event is WelcomeEvent | ReconnectEvent | MutationEvent =>\n            event.type === 'welcome' || event.type === 'reconnect' || event.type === 'mutation',\n        ),\n      )\n\n    const welcome = listener.pipe(\n      filter((event): event is WelcomeEvent => event.type === 'welcome'),\n      shareReplay({bufferSize: 1, refCount: false}),\n    )\n\n    // When new contexts initialize, they need to explicitly request the welcome\n    // event, as we can't rely on emitting it into the void\n    const unsubscribe = comlink.on('visual-editing/snapshot-welcome', async () => {\n      const event = await new Promise<WelcomeEvent>((resolve) => {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        welcome.pipe(first()).subscribe((event) => {\n          resolve(event)\n        })\n      })\n      return {event}\n    })\n\n    const reconnect = listener.pipe(\n      filter((event): event is ReconnectEvent => event.type === 'reconnect'),\n    )\n\n    const mutations = listener.pipe(\n      filter((event): event is MutationEvent => event.type === 'mutation'),\n    )\n\n    const events = merge(\n      /**\n       * @deprecated remove 'welcome' here and switch to explict welcome message fetching at next major\n       */\n      welcome,\n      mutations,\n      reconnect,\n    ).subscribe((event) => {\n      comlink.post('presentation/snapshot-event', {event})\n    })\n\n    return () => {\n      unsubscribe()\n      events.unsubscribe()\n    }\n  }, [client, comlink])\n\n  useEffect(() => {\n    return comlink.on('visual-editing/fetch-snapshot', async (data) => {\n      const snapshot = await client.getDocument(data.documentId, {\n        tag: 'document.snapshots',\n      })\n      return {snapshot}\n    })\n  }, [client, comlink])\n\n  useEffect(() => {\n    return comlink.on('visual-editing/mutate', async (data) => {\n      return client.dataRequest('mutate', data, {\n        visibility: 'async',\n        returnDocuments: true,\n      })\n    })\n  }, [client, comlink])\n\n  return null\n}\n\nexport default memo(PostMessageDocuments)\n"],
  "mappings": "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",
  "names": ["PostMessageDocuments", "props", "$", "_c", "comlink", "perspective", "t0", "isReleasePerspective", "RELEASES_STUDIO_CLIENT_OPTIONS", "apiVersion", "API_VERSION", "client", "useClient", "t1", "t2", "listener", "listen", "effectFormat", "events", "includePreviousRevision", "includeResult", "includeAllVersions", "tag", "visibility", "pipe", "filter", "_temp", "welcome", "_temp2", "shareReplay", "bufferSize", "refCount", "unsubscribe", "on", "event", "Promise", "resolve", "first", "subscribe", "event_1", "reconnect", "_temp3", "mutations", "_temp4", "merge", "event_5", "post", "useEffect", "t3", "t4", "data", "snapshot", "getDocument", "documentId", "t5", "t6", "data_0", "dataRequest", "returnDocuments", "memo", "type", "event_0", "event_3", "event_4"]
}
