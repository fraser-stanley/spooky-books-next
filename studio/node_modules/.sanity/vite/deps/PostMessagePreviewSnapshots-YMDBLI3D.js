import {
  NEVER,
  Subject,
  combineLatest,
  debounceTime,
  filter,
  getDraftId,
  getPublishedId2 as getPublishedId,
  map,
  merge,
  share,
  skipWhile,
  switchMap,
  takeUntil,
  useDocumentPreviewStore,
  useSchema
} from "./chunk-O7WNDNL5.js";
import "./chunk-USD2O2XB.js";
import "./chunk-HC2ZIG6Z.js";
import "./chunk-OFN5KQCK.js";
import "./chunk-WTWHXYYA.js";
import "./chunk-F2YLR35X.js";
import "./chunk-QCUVG3AT.js";
import "./chunk-I7BJ5GOC.js";
import "./chunk-IJWYKFFQ.js";
import {
  require_react
} from "./chunk-VTT67W3I.js";
import {
  __toESM
} from "./chunk-MJOZMRNF.js";

// node_modules/sanity/lib/_chunks-es/PostMessagePreviewSnapshots.mjs
var import_react = __toESM(require_react(), 1);
var PostMessagePreviews = (props) => {
  const {
    comlink,
    refs,
    perspective
  } = props, documentPreviewStore = useDocumentPreviewStore(), schema = useSchema(), refsSubject = (0, import_react.useMemo)(() => new Subject(), []), previews$ = (0, import_react.useMemo)(() => refsSubject.asObservable().pipe(switchMap((refs_0) => combineLatest(refs_0.map((ref) => {
    const draftRef = {
      ...ref,
      _id: getDraftId(ref._id)
    }, draft$ = perspective === "published" ? (
      // Don't emit if not displaying drafts
      NEVER
    ) : documentPreviewStore.observeForPreview(draftRef, schema.get(draftRef._type)).pipe(
      // Share to prevent double subscribe in the merge
      share(),
      // Don't emit if no snapshot is returned
      // eslint-disable-next-line max-nested-callbacks
      skipWhile((p) => p.snapshot === null)
    ), publishedRef = {
      ...ref,
      _id: getPublishedId(ref._id)
    }, published$ = documentPreviewStore.observeForPreview(publishedRef, schema.get(publishedRef._type));
    return merge(published$.pipe(takeUntil(draft$)), draft$).pipe(
      // eslint-disable-next-line max-nested-callbacks
      filter((p_0) => !!p_0.snapshot),
      // eslint-disable-next-line max-nested-callbacks
      map((p_1) => {
        const snapshot = p_1.snapshot;
        return {
          _id: getPublishedId(snapshot._id),
          title: snapshot.title,
          subtitle: snapshot.subtitle,
          description: snapshot.description,
          imageUrl: snapshot.imageUrl
        };
      })
    );
  }))), debounceTime(0)), [documentPreviewStore, refsSubject, schema, perspective]), lastSnapshots = (0, import_react.useRef)([]);
  return (0, import_react.useEffect)(() => {
    const sub = previews$.subscribe((snapshots) => {
      comlink.post("presentation/preview-snapshots", {
        snapshots
      }), lastSnapshots.current = snapshots;
    });
    return () => {
      sub.unsubscribe();
    };
  }, [comlink, previews$]), (0, import_react.useEffect)(() => comlink.on("visual-editing/preview-snapshots", () => ({
    snapshots: lastSnapshots.current
  })), [comlink]), (0, import_react.useEffect)(() => {
    refsSubject.next(refs);
  }, [refs, refsSubject]), null;
};
var PostMessagePreviewSnapshots = (0, import_react.memo)(PostMessagePreviews);
export {
  PostMessagePreviewSnapshots as default
};
//# sourceMappingURL=PostMessagePreviewSnapshots-YMDBLI3D.js.map
